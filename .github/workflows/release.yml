name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 2.1.0)"
        required: true
        type: string
      create_tag:
        description: "Create git tag"
        required: true
        type: boolean
        default: true

env:
  PYTHON_VERSION: "3.11"

jobs:
  validate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      tag-name: ${{ steps.get-version.outputs.tag-name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get-version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG_NAME="v$VERSION"
          else
            TAG_NAME="${{ github.ref_name }}"
            VERSION="${TAG_NAME#v}"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag-name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          echo "Tag: $TAG_NAME"

      - name: Validate version format
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version format is invalid. Expected format: X.Y.Z"
            exit 1
          fi

      - name: Check version in files
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"

          # Check pyproject.toml
          PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          if [[ "$PYPROJECT_VERSION" != "$VERSION" ]]; then
            echo "Error: Version mismatch in pyproject.toml. Expected: $VERSION, Found: $PYPROJECT_VERSION"
            exit 1
          fi

          # Check setup.py
          SETUP_VERSION=$(grep 'version=' setup.py | sed 's/.*version="\(.*\)".*/\1/')
          if [[ "$SETUP_VERSION" != "$VERSION" ]]; then
            echo "Error: Version mismatch in setup.py. Expected: $VERSION, Found: $SETUP_VERSION"
            exit 1
          fi

          echo "‚úÖ Version validation passed"

  test:
    needs: validate-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install pytest pytest-cov || true

      - name: Test with pytest
        run: |
          pytest tests/ --cov=src || true

  create-release:
    needs: [validate-version, test]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Create git tag
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_tag == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ needs.validate-version.outputs.tag-name }}" -m "Release ${{ needs.validate-version.outputs.version }}"
          git push origin "${{ needs.validate-version.outputs.tag-name }}"

      - name: Generate changelog for release
        id: changelog
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"

          # Extract changelog for this version
          awk "/^## \[$VERSION\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md > release_notes.md

          if [[ ! -s release_notes.md ]]; then
            echo "### Changes" > release_notes.md
            echo "- Version $VERSION release" >> release_notes.md
          fi

          echo "Release notes:"
          cat release_notes.md

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-version.outputs.tag-name }}
          release_name: Release ${{ needs.validate-version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/
          asset_name: multi-exchanges-trading-bot-${{ needs.validate-version.outputs.version }}.tar.gz
          asset_content_type: application/gzip

  publish-pypi:
    needs: [validate-version, create-release]
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build package
        run: |
          python -m build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

  build-docker:
    needs: [validate-version, create-release]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify-success:
    needs: [validate-version, publish-pypi, build-docker]
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Notify successful release
        run: |
          echo "üéâ Release ${{ needs.validate-version.outputs.version }} completed successfully!"
          echo "üì¶ PyPI: https://pypi.org/project/multi-exchanges-trading-bot/${{ needs.validate-version.outputs.version }}"
          echo "üê≥ Docker: ghcr.io/${{ github.repository }}:${{ needs.validate-version.outputs.version }}"
          echo "üìã GitHub Release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.validate-version.outputs.tag-name }}"
