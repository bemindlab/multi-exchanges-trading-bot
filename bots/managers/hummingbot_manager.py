import asyncio
import json
import logging
import os
import subprocess
import yaml
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Callable
from dataclasses import dataclass, asdict
import paho.mqtt.client as mqtt
from pathlib import Path

@dataclass
class HummingbotStrategy:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• strategy ‡∏Ç‡∏≠‡∏á Hummingbot"""
    name: str
    strategy_type: str
    exchange: str
    trading_pair: str
    config: Dict[str, Any]
    status: str = "stopped"  # stopped, running, paused, error
    created_at: datetime = None
    last_updated: datetime = None
    performance: Dict[str, Any] = None
    
    def __post_init__(self):
        if self.created_at is None:
            self.created_at = datetime.now()
        if self.last_updated is None:
            self.last_updated = datetime.now()
        if self.performance is None:
            self.performance = {
                "total_trades": 0,
                "profitable_trades": 0,
                "total_pnl": 0.0,
                "win_rate": 0.0,
                "start_time": None,
                "end_time": None
            }

class HummingbotMQTTManager:
    """‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Hummingbot strategies ‡∏ú‡πà‡∏≤‡∏ô MQTT"""
    
    def __init__(self, config_path: str = "config.json"):
        self.config_path = config_path
        self.config = self._load_config()
        self.logger = self._setup_logger()
        
        # MQTT settings
        self.mqtt_client = None
        self.mqtt_config = self.config.get("mqtt", {})
        self.mqtt_topics = {
            "command": "hummingbot/command",
            "status": "hummingbot/status", 
            "strategy": "hummingbot/strategy",
            "performance": "hummingbot/performance",
            "logs": "hummingbot/logs"
        }
        
        # Hummingbot settings
        self.hummingbot_config = self.config.get("hummingbot", {})
        self.hummingbot_path = self.hummingbot_config.get("path", "/opt/hummingbot")
        self.strategies_path = Path(self.hummingbot_path) / "conf" / "strategies"
        self.logs_path = Path(self.hummingbot_path) / "logs"
        
        # Strategy management
        self.strategies: Dict[str, HummingbotStrategy] = {}
        self.running_processes: Dict[str, subprocess.Popen] = {}
        self.command_handlers: Dict[str, Callable] = {}
        
        # Status
        self.is_connected = False
        self.last_heartbeat = datetime.now()
        
        self._setup_command_handlers()
    
    def _load_config(self) -> Dict:
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î config: {e}")
            return {}
    
    def _setup_logger(self) -> logging.Logger:
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logger"""
        logger = logging.getLogger('HummingbotMQTT')
        logger.setLevel(logging.INFO)
        
        if not logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
            handler.setFormatter(formatter)
            logger.addHandler(handler)
        
        return logger
    
    def _setup_command_handlers(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ command handlers"""
        self.command_handlers = {
            "create_strategy": self._handle_create_strategy,
            "start_strategy": self._handle_start_strategy,
            "stop_strategy": self._handle_stop_strategy,
            "pause_strategy": self._handle_pause_strategy,
            "resume_strategy": self._handle_resume_strategy,
            "delete_strategy": self._handle_delete_strategy,
            "get_strategies": self._handle_get_strategies,
            "get_strategy_status": self._handle_get_strategy_status,
            "update_strategy_config": self._handle_update_strategy_config,
            "get_performance": self._handle_get_performance,
            "restart_hummingbot": self._handle_restart_hummingbot,
            "get_logs": self._handle_get_logs
        }
    
    async def initialize(self) -> bool:
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"""
        self.logger.info("ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Hummingbot MQTT Manager")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Hummingbot path
        if not self._check_hummingbot_installation():
            return False
        
        # ‡πÇ‡∏´‡∏•‡∏î strategies ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        await self._load_existing_strategies()
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT
        if not await self._connect_mqtt():
            return False
        
        self.logger.info("‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Hummingbot MQTT Manager ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return True
    
    def _check_hummingbot_installation(self) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Hummingbot"""
        hummingbot_executable = Path(self.hummingbot_path) / "bin" / "hummingbot"
        
        if not hummingbot_executable.exists():
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Hummingbot ‡∏ó‡∏µ‡πà {hummingbot_executable}")
            return False
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        self.strategies_path.mkdir(parents=True, exist_ok=True)
        self.logs_path.mkdir(parents=True, exist_ok=True)
        
        self.logger.info(f"‚úÖ ‡∏û‡∏ö Hummingbot ‡∏ó‡∏µ‡πà {self.hummingbot_path}")
        return True
    
    async def _load_existing_strategies(self):
        """‡πÇ‡∏´‡∏•‡∏î strategies ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà"""
        try:
            if not self.strategies_path.exists():
                return
            
            for strategy_file in self.strategies_path.glob("*.yml"):
                try:
                    with open(strategy_file, 'r') as f:
                        config = yaml.safe_load(f)
                    
                    strategy_name = strategy_file.stem
                    strategy = HummingbotStrategy(
                        name=strategy_name,
                        strategy_type=config.get("strategy", "unknown"),
                        exchange=config.get("exchange", "unknown"),
                        trading_pair=config.get("trading_pair", "unknown"),
                        config=config,
                        status="stopped"
                    )
                    
                    self.strategies[strategy_name] = strategy
                    self.logger.info(f"üìã ‡πÇ‡∏´‡∏•‡∏î strategy: {strategy_name}")
                    
                except Exception as e:
                    self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î strategy {strategy_file}: {e}")
        
        except Exception as e:
            self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î strategies: {e}")
    
    async def _connect_mqtt(self) -> bool:
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT broker"""
        try:
            self.mqtt_client = mqtt.Client()
            self.mqtt_client.on_connect = self._on_mqtt_connect
            self.mqtt_client.on_message = self._on_mqtt_message
            self.mqtt_client.on_disconnect = self._on_mqtt_disconnect
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ authentication ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if self.mqtt_config.get("username"):
                self.mqtt_client.username_pw_set(
                    self.mqtt_config["username"],
                    self.mqtt_config.get("password", "")
                )
            
            # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            host = self.mqtt_config.get("host", "localhost")
            port = self.mqtt_config.get("port", 1883)
            
            self.mqtt_client.connect(host, port, 60)
            self.mqtt_client.loop_start()
            
            # ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            await asyncio.sleep(2)
            
            if self.is_connected:
                self.logger.info(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT broker: {host}:{port}")
                return True
            else:
                self.logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT broker")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT: {e}")
            return False
    
    def _on_mqtt_connect(self, client, userdata, flags, rc):
        """Callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"""
        if rc == 0:
            self.is_connected = True
            self.logger.info("üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
            # Subscribe topics
            for topic_name, topic in self.mqtt_topics.items():
                if topic_name == "command":
                    client.subscribe(f"{topic}/+")
                    self.logger.info(f"üì° Subscribe: {topic}/+")
        else:
            self.logger.error(f"‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {rc}")
    
    def _on_mqtt_message(self, client, userdata, msg):
        """Callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° MQTT"""
        try:
            topic = msg.topic
            payload = json.loads(msg.payload.decode())
            
            self.logger.info(f"üì® ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {topic}")
            
            # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• command
            if topic.startswith(self.mqtt_topics["command"]):
                asyncio.create_task(self._process_command(topic, payload))
                
        except Exception as e:
            self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° MQTT: {e}")
    
    def _on_mqtt_disconnect(self, client, userdata, rc):
        """Callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT"""
        self.is_connected = False
        self.logger.warning("‚ö†Ô∏è ‡∏Ç‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT")
    
    async def _process_command(self, topic: str, payload: Dict):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• command ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö"""
        try:
            # ‡πÅ‡∏¢‡∏Å command ‡∏à‡∏≤‡∏Å topic
            command = topic.split("/")[-1]
            
            if command in self.command_handlers:
                response = await self.command_handlers[command](payload)
                
                # ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö
                response_topic = f"{self.mqtt_topics['status']}/{command}"
                self._publish_mqtt(response_topic, response)
            else:
                self.logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å command: {command}")
                
        except Exception as e:
            self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• command: {e}")
    
    def _publish_mqtt(self, topic: str, payload: Dict):
        """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô MQTT"""
        try:
            if self.mqtt_client and self.is_connected:
                message = json.dumps(payload, default=str, ensure_ascii=False)
                self.mqtt_client.publish(topic, message)
                self.logger.debug(f"üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {topic}")
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° MQTT: {e}")
    
    # === Command Handlers ===
    
    async def _handle_create_strategy(self, payload: Dict) -> Dict:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á strategy ‡πÉ‡∏´‡∏°‡πà"""
        try:
            strategy_name = payload.get("name")
            strategy_type = payload.get("strategy_type")
            exchange = payload.get("exchange")
            trading_pair = payload.get("trading_pair")
            config = payload.get("config", {})
            
            if not all([strategy_name, strategy_type, exchange, trading_pair]):
                return {"success": False, "error": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"}
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ strategy ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if strategy_name in self.strategies:
                return {"success": False, "error": f"Strategy {strategy_name} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"}
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á strategy config
            strategy_config = {
                "strategy": strategy_type,
                "exchange": exchange,
                "trading_pair": trading_pair,
                **config
            }
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå config
            config_file = self.strategies_path / f"{strategy_name}.yml"
            with open(config_file, 'w') as f:
                yaml.dump(strategy_config, f, default_flow_style=False)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á strategy object
            strategy = HummingbotStrategy(
                name=strategy_name,
                strategy_type=strategy_type,
                exchange=exchange,
                trading_pair=trading_pair,
                config=strategy_config
            )
            
            self.strategies[strategy_name] = strategy
            
            self.logger.info(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á strategy: {strategy_name}")
            return {
                "success": True,
                "message": f"‡∏™‡∏£‡πâ‡∏≤‡∏á strategy {strategy_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                "strategy": asdict(strategy)
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á strategy: {e}")
            return {"success": False, "error": str(e)}
    
    async def _handle_start_strategy(self, payload: Dict) -> Dict:
        """‡πÄ‡∏£‡∏¥‡πà‡∏° strategy"""
        try:
            strategy_name = payload.get("name")
            
            if not strategy_name or strategy_name not in self.strategies:
                return {"success": False, "error": "‡πÑ‡∏°‡πà‡∏û‡∏ö strategy"}
            
            strategy = self.strategies[strategy_name]
            
            if strategy.status == "running":
                return {"success": False, "error": "Strategy ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"}
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° Hummingbot process
            success = await self._start_hummingbot_process(strategy_name)
            
            if success:
                strategy.status = "running"
                strategy.last_updated = datetime.now()
                strategy.performance["start_time"] = datetime.now()
                
                self.logger.info(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° strategy: {strategy_name}")
                return {
                    "success": True,
                    "message": f"‡πÄ‡∏£‡∏¥‡πà‡∏° strategy {strategy_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
                }
            else:
                return {"success": False, "error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° strategy ‡πÑ‡∏î‡πâ"}
                
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° strategy: {e}")
            return {"success": False, "error": str(e)}
    
    async def _handle_stop_strategy(self, payload: Dict) -> Dict:
        """‡∏´‡∏¢‡∏∏‡∏î strategy"""
        try:
            strategy_name = payload.get("name")
            
            if not strategy_name or strategy_name not in self.strategies:
                return {"success": False, "error": "‡πÑ‡∏°‡πà‡∏û‡∏ö strategy"}
            
            strategy = self.strategies[strategy_name]
            
            if strategy.status != "running":
                return {"success": False, "error": "Strategy ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà"}
            
            # ‡∏´‡∏¢‡∏∏‡∏î Hummingbot process
            success = await self._stop_hummingbot_process(strategy_name)
            
            if success:
                strategy.status = "stopped"
                strategy.last_updated = datetime.now()
                strategy.performance["end_time"] = datetime.now()
                
                self.logger.info(f"‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î strategy: {strategy_name}")
                return {
                    "success": True,
                    "message": f"‡∏´‡∏¢‡∏∏‡∏î strategy {strategy_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
                }
            else:
                return {"success": False, "error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏¢‡∏∏‡∏î strategy ‡πÑ‡∏î‡πâ"}
                
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏¢‡∏∏‡∏î strategy: {e}")
            return {"success": False, "error": str(e)}
    
    async def _handle_pause_strategy(self, payload: Dict) -> Dict:
        """‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß strategy"""
        try:
            strategy_name = payload.get("name")
            
            if not strategy_name or strategy_name not in self.strategies:
                return {"success": False, "error": "‡πÑ‡∏°‡πà‡∏û‡∏ö strategy"}
            
            strategy = self.strategies[strategy_name]
            
            if strategy.status != "running":
                return {"success": False, "error": "Strategy ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà"}
            
            # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á pause ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Hummingbot
            success = await self._send_hummingbot_command(strategy_name, "stop")
            
            if success:
                strategy.status = "paused"
                strategy.last_updated = datetime.now()
                
                self.logger.info(f"‚è∏Ô∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß strategy: {strategy_name}")
                return {
                    "success": True,
                    "message": f"‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß strategy {strategy_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
                }
            else:
                return {"success": False, "error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß strategy ‡πÑ‡∏î‡πâ"}
                
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß strategy: {e}")
            return {"success": False, "error": str(e)}
    
    async def _handle_resume_strategy(self, payload: Dict) -> Dict:
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πà‡∏≠ strategy"""
        try:
            strategy_name = payload.get("name")
            
            if not strategy_name or strategy_name not in self.strategies:
                return {"success": False, "error": "‡πÑ‡∏°‡πà‡∏û‡∏ö strategy"}
            
            strategy = self.strategies[strategy_name]
            
            if strategy.status != "paused":
                return {"success": False, "error": "Strategy ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß"}
            
            # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á start ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Hummingbot
            success = await self._send_hummingbot_command(strategy_name, "start")
            
            if success:
                strategy.status = "running"
                strategy.last_updated = datetime.now()
                
                self.logger.info(f"‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πà‡∏≠ strategy: {strategy_name}")
                return {
                    "success": True,
                    "message": f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πà‡∏≠ strategy {strategy_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
                }
            else:
                return {"success": False, "error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πà‡∏≠ strategy ‡πÑ‡∏î‡πâ"}
                
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πà‡∏≠ strategy: {e}")
            return {"success": False, "error": str(e)}
    
    async def _handle_delete_strategy(self, payload: Dict) -> Dict:
        """‡∏•‡∏ö strategy"""
        try:
            strategy_name = payload.get("name")
            
            if not strategy_name or strategy_name not in self.strategies:
                return {"success": False, "error": "‡πÑ‡∏°‡πà‡∏û‡∏ö strategy"}
            
            strategy = self.strategies[strategy_name]
            
            # ‡∏´‡∏¢‡∏∏‡∏î strategy ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
            if strategy.status == "running":
                await self._stop_hummingbot_process(strategy_name)
            
            # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå config
            config_file = self.strategies_path / f"{strategy_name}.yml"
            if config_file.exists():
                config_file.unlink()
            
            # ‡∏•‡∏ö‡∏à‡∏≤‡∏Å memory
            del self.strategies[strategy_name]
            
            self.logger.info(f"üóëÔ∏è ‡∏•‡∏ö strategy: {strategy_name}")
            return {
                "success": True,
                "message": f"‡∏•‡∏ö strategy {strategy_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö strategy: {e}")
            return {"success": False, "error": str(e)}
    
    async def _handle_get_strategies(self, payload: Dict) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ strategies ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            strategies_data = []
            
            for strategy_name, strategy in self.strategies.items():
                strategy_data = asdict(strategy)
                strategies_data.append(strategy_data)
            
            return {
                "success": True,
                "strategies": strategies_data,
                "total": len(strategies_data)
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ strategies: {e}")
            return {"success": False, "error": str(e)}
    
    async def _handle_get_strategy_status(self, payload: Dict) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á strategy"""
        try:
            strategy_name = payload.get("name")
            
            if not strategy_name or strategy_name not in self.strategies:
                return {"success": False, "error": "‡πÑ‡∏°‡πà‡∏û‡∏ö strategy"}
            
            strategy = self.strategies[strategy_name]
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å process
            if strategy_name in self.running_processes:
                process = self.running_processes[strategy_name]
                if process.poll() is None:
                    strategy.status = "running"
                else:
                    strategy.status = "stopped"
                    del self.running_processes[strategy_name]
            
            return {
                "success": True,
                "strategy": asdict(strategy)
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ strategy: {e}")
            return {"success": False, "error": str(e)}
    
    async def _handle_update_strategy_config(self, payload: Dict) -> Dict:
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï config ‡∏Ç‡∏≠‡∏á strategy"""
        try:
            strategy_name = payload.get("name")
            new_config = payload.get("config", {})
            
            if not strategy_name or strategy_name not in self.strategies:
                return {"success": False, "error": "‡πÑ‡∏°‡πà‡∏û‡∏ö strategy"}
            
            strategy = self.strategies[strategy_name]
            
            if strategy.status == "running":
                return {"success": False, "error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç config ‡∏Ç‡∏ì‡∏∞ strategy ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà"}
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï config
            strategy.config.update(new_config)
            strategy.last_updated = datetime.now()
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå config
            config_file = self.strategies_path / f"{strategy_name}.yml"
            with open(config_file, 'w') as f:
                yaml.dump(strategy.config, f, default_flow_style=False)
            
            self.logger.info(f"üìù ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï config: {strategy_name}")
            return {
                "success": True,
                "message": f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï config {strategy_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                "strategy": asdict(strategy)
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï config: {e}")
            return {"success": False, "error": str(e)}
    
    async def _handle_get_performance(self, payload: Dict) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô"""
        try:
            strategy_name = payload.get("name")
            
            if strategy_name and strategy_name not in self.strategies:
                return {"success": False, "error": "‡πÑ‡∏°‡πà‡∏û‡∏ö strategy"}
            
            if strategy_name:
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á strategy ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                strategy = self.strategies[strategy_name]
                performance = await self._get_strategy_performance(strategy_name)
                
                return {
                    "success": True,
                    "strategy": strategy_name,
                    "performance": performance
                }
            else:
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å strategies
                all_performance = {}
                
                for name in self.strategies.keys():
                    performance = await self._get_strategy_performance(name)
                    all_performance[name] = performance
                
                return {
                    "success": True,
                    "performance": all_performance
                }
                
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô: {e}")
            return {"success": False, "error": str(e)}
    
    async def _handle_restart_hummingbot(self, payload: Dict) -> Dict:
        """‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó Hummingbot"""
        try:
            # ‡∏´‡∏¢‡∏∏‡∏î strategies ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            for strategy_name in list(self.running_processes.keys()):
                await self._stop_hummingbot_process(strategy_name)
            
            # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
            await asyncio.sleep(5)
            
            self.logger.info("üîÑ ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó Hummingbot ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return {
                "success": True,
                "message": "‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó Hummingbot ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó Hummingbot: {e}")
            return {"success": False, "error": str(e)}
    
    async def _handle_get_logs(self, payload: Dict) -> Dict:
        """‡∏î‡∏∂‡∏á logs"""
        try:
            strategy_name = payload.get("name")
            lines = payload.get("lines", 100)
            
            if strategy_name and strategy_name not in self.strategies:
                return {"success": False, "error": "‡πÑ‡∏°‡πà‡∏û‡∏ö strategy"}
            
            if strategy_name:
                # ‡∏î‡∏∂‡∏á logs ‡∏Ç‡∏≠‡∏á strategy ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                log_file = self.logs_path / f"{strategy_name}.log"
                logs = await self._read_log_file(log_file, lines)
                
                return {
                    "success": True,
                    "strategy": strategy_name,
                    "logs": logs
                }
            else:
                # ‡∏î‡∏∂‡∏á logs ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
                log_file = self.logs_path / "hummingbot.log"
                logs = await self._read_log_file(log_file, lines)
                
                return {
                    "success": True,
                    "logs": logs
                }
                
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á logs: {e}")
            return {"success": False, "error": str(e)}
    
    # === Helper Methods ===
    
    async def _start_hummingbot_process(self, strategy_name: str) -> bool:
        """‡πÄ‡∏£‡∏¥‡πà‡∏° Hummingbot process"""
        try:
            if strategy_name in self.running_processes:
                return False
            
            hummingbot_cmd = [
                str(Path(self.hummingbot_path) / "bin" / "hummingbot"),
                "--strategy-file-name", f"{strategy_name}.yml"
            ]
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° process
            process = subprocess.Popen(
                hummingbot_cmd,
                cwd=self.hummingbot_path,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            self.running_processes[strategy_name] = process
            
            # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ process ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            await asyncio.sleep(3)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ process ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
            if process.poll() is None:
                return True
            else:
                del self.running_processes[strategy_name]
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° Hummingbot process: {e}")
            return False
    
    async def _stop_hummingbot_process(self, strategy_name: str) -> bool:
        """‡∏´‡∏¢‡∏∏‡∏î Hummingbot process"""
        try:
            if strategy_name not in self.running_processes:
                return True
            
            process = self.running_processes[strategy_name]
            
            # ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏´‡∏¢‡∏∏‡∏î
            process.terminate()
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ process ‡∏´‡∏¢‡∏∏‡∏î
            try:
                process.wait(timeout=10)
            except subprocess.TimeoutExpired:
                # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏¢‡∏∏‡∏î ‡πÉ‡∏´‡πâ kill
                process.kill()
                process.wait()
            
            del self.running_processes[strategy_name]
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏¢‡∏∏‡∏î Hummingbot process: {e}")
            return False
    
    async def _send_hummingbot_command(self, strategy_name: str, command: str) -> bool:
        """‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Hummingbot process"""
        try:
            if strategy_name not in self.running_processes:
                return False
            
            process = self.running_processes[strategy_name]
            
            if process.poll() is not None:
                return False
            
            # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
            process.stdin.write(f"{command}\n")
            process.stdin.flush()
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Hummingbot: {e}")
            return False
    
    async def _get_strategy_performance(self, strategy_name: str) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á strategy"""
        try:
            strategy = self.strategies[strategy_name]
            
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å log files ‡∏´‡∏£‡∏∑‡∏≠ database
            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å strategy object
            
            performance = strategy.performance.copy()
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì win rate
            if performance["total_trades"] > 0:
                performance["win_rate"] = (performance["profitable_trades"] / performance["total_trades"]) * 100
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            if performance["start_time"] and performance["end_time"]:
                duration = performance["end_time"] - performance["start_time"]
                performance["duration_hours"] = duration.total_seconds() / 3600
            elif performance["start_time"]:
                duration = datetime.now() - performance["start_time"]
                performance["duration_hours"] = duration.total_seconds() / 3600
            
            return performance
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô: {e}")
            return {}
    
    async def _read_log_file(self, log_file: Path, lines: int = 100) -> List[str]:
        """‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå log"""
        try:
            if not log_file.exists():
                return []
            
            with open(log_file, 'r', encoding='utf-8') as f:
                all_lines = f.readlines()
            
            # ‡∏î‡∏∂‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            return all_lines[-lines:] if len(all_lines) > lines else all_lines
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå log: {e}")
            return []
    
    async def start_monitoring(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö"""
        self.logger.info("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö")
        
        while True:
            try:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ strategies
                await self._monitor_strategies()
                
                # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡πà‡∏≤‡∏ô MQTT
                await self._publish_status_update()
                
                # ‡∏™‡πà‡∏á heartbeat
                self._publish_mqtt(
                    f"{self.mqtt_topics['status']}/heartbeat",
                    {
                        "timestamp": datetime.now(),
                        "status": "alive",
                        "strategies_count": len(self.strategies),
                        "running_count": len([s for s in self.strategies.values() if s.status == "running"])
                    }
                )
                
                # ‡∏£‡∏≠ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                await asyncio.sleep(30)
                
            except Exception as e:
                self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö: {e}")
                await asyncio.sleep(60)
    
    async def _monitor_strategies(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ strategies"""
        for strategy_name, strategy in self.strategies.items():
            try:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö process
                if strategy_name in self.running_processes:
                    process = self.running_processes[strategy_name]
                    
                    if process.poll() is not None:
                        # Process ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                        strategy.status = "error"
                        del self.running_processes[strategy_name]
                        
                        self.logger.warning(f"‚ö†Ô∏è Strategy {strategy_name} ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î")
                        
                        # ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                        self._publish_mqtt(
                            f"{self.mqtt_topics['logs']}/error",
                            {
                                "strategy": strategy_name,
                                "message": "Strategy ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î",
                                "timestamp": datetime.now()
                            }
                        )
                
            except Exception as e:
                self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö strategy {strategy_name}: {e}")
    
    async def _publish_status_update(self):
        """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï"""
        try:
            status_data = {
                "timestamp": datetime.now(),
                "strategies": {}
            }
            
            for strategy_name, strategy in self.strategies.items():
                status_data["strategies"][strategy_name] = {
                    "status": strategy.status,
                    "last_updated": strategy.last_updated,
                    "performance": strategy.performance
                }
            
            self._publish_mqtt(
                f"{self.mqtt_topics['status']}/update",
                status_data
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: {e}")
    
    async def shutdown(self):
        """‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö"""
        self.logger.info("üõë ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö Hummingbot MQTT Manager")
        
        # ‡∏´‡∏¢‡∏∏‡∏î strategies ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        for strategy_name in list(self.running_processes.keys()):
            await self._stop_hummingbot_process(strategy_name)
        
        # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT
        if self.mqtt_client:
            self.mqtt_client.loop_stop()
            self.mqtt_client.disconnect()
        
        self.logger.info("‚úÖ ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

# === Main function ===
async def run_hummingbot_manager():
    """‡∏£‡∏±‡∏ô Hummingbot MQTT Manager"""
    manager = HummingbotMQTTManager()
    
    try:
        if await manager.initialize():
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
            await manager.start_monitoring()
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Hummingbot MQTT Manager ‡πÑ‡∏î‡πâ")
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    finally:
        await manager.shutdown()

# === Run ===
if __name__ == "__main__":
    asyncio.run(run_hummingbot_manager()) 