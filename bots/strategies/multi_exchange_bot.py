import asyncio
import logging
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import pandas as pd
from .exchange_manager import ExchangeManager
from .market_analyzer import MultiExchangeMarketAnalyzer
from .risk_manager import RiskManager

class MultiExchangeTradingBot:
    """‡∏ö‡∏≠‡∏ó‡πÄ‡∏ó‡∏£‡∏î‡∏î‡∏¥‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢ Exchange ‡∏ó‡∏±‡πâ‡∏á CEX ‡πÅ‡∏•‡∏∞ DEX"""
    
    def __init__(self, config_path: str = "config.json"):
        self.config_path = config_path
        self.exchange_manager = ExchangeManager(config_path)
        self.market_analyzer = MultiExchangeMarketAnalyzer(config_path)
        self.risk_manager = RiskManager()
        self.logger = self._setup_logger()
        
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏≠‡∏ó
        self.is_running = False
        self.active_orders = {}  # {exchange_name: {symbol: [orders]}}
        self.positions = {}      # {exchange_name: {symbol: position_info}}
        self.performance = {}    # {exchange_name: performance_data}
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏£‡∏î
        self.trading_config = {}
        self.last_analysis_time = {}
        
    def _setup_logger(self) -> logging.Logger:
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logger"""
        logger = logging.getLogger('MultiExchangeBot')
        logger.setLevel(logging.INFO)
        
        if not logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
            handler.setFormatter(formatter)
            logger.addHandler(handler)
        
        return logger
    
    async def initialize(self) -> bool:
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏≠‡∏ó"""
        self.logger.info("ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Multi-Exchange Trading Bot")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô exchange manager
        if not self.exchange_manager.initialize_exchanges():
            self.logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö exchange ‡πÉ‡∏î‡πÜ ‡πÑ‡∏î‡πâ")
            return False
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô market analyzer
        if not await self.market_analyzer.initialize():
            self.logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô market analyzer ‡πÑ‡∏î‡πâ")
            return False
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏£‡∏î
        await self._load_trading_configs()
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ exchange
        for exchange_name in self.exchange_manager.get_enabled_exchanges():
            self.active_orders[exchange_name] = {}
            self.positions[exchange_name] = {}
            self.performance[exchange_name] = {
                'total_trades': 0,
                'profitable_trades': 0,
                'total_profit': 0.0,
                'start_balance': await self._get_initial_balance(exchange_name)
            }
        
        self.logger.info("‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏≠‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return True
    
    async def _load_trading_configs(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ exchange"""
        enabled_exchanges = self.exchange_manager.get_enabled_exchanges()
        
        for exchange_name in enabled_exchanges:
            trading_pairs = self.exchange_manager.get_trading_pairs(exchange_name)
            
            for symbol in trading_pairs:
                # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á config
                try:
                    df = await self.market_analyzer.fetch_ohlc_data(exchange_name, symbol, "1m", 100)
                    if df is not None and not df.empty:
                        df = self.market_analyzer.calculate_technical_indicators(df)
                        analysis = self.market_analyzer.analyze_market_condition(df, symbol)
                        config = self.market_analyzer.generate_trading_config(analysis, exchange_name)
                        
                        if exchange_name not in self.trading_config:
                            self.trading_config[exchange_name] = {}
                        
                        self.trading_config[exchange_name][symbol] = config
                        self.logger.info(f"üìã ‡πÇ‡∏´‡∏•‡∏î config ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {exchange_name}:{symbol}")
                        
                except Exception as e:
                    self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î config ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {exchange_name}:{symbol}: {e}")
    
    async def _get_initial_balance(self, exchange_name: str) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"""
        try:
            balance = self.exchange_manager.get_balance(exchange_name)
            return balance if balance else {}
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å {exchange_name}: {e}")
            return {}
    
    async def start_trading(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        if self.is_running:
            self.logger.warning("‚ö†Ô∏è ‡∏ö‡∏≠‡∏ó‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
            return
        
        self.is_running = True
        self.logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á tasks ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ exchange
        tasks = []
        
        for exchange_name in self.exchange_manager.get_enabled_exchanges():
            task = asyncio.create_task(self._trading_loop(exchange_name))
            tasks.append(task)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° task ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï config
        config_update_task = asyncio.create_task(self._config_update_loop())
        tasks.append(config_update_task)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° task ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        status_task = asyncio.create_task(self._status_report_loop())
        tasks.append(status_task)
        
        try:
            await asyncio.gather(*tasks)
        except KeyboardInterrupt:
            self.logger.info("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î: {e}")
        finally:
            await self.stop_trading()
    
    async def _trading_loop(self, exchange_name: str):
        """‡∏•‡∏π‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö exchange ‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÜ"""
        self.logger.info(f"üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏π‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {exchange_name}")
        
        while self.is_running:
            try:
                trading_pairs = self.exchange_manager.get_trading_pairs(exchange_name)
                
                for symbol in trading_pairs:
                    if not self.is_running:
                        break
                    
                    await self._process_symbol(exchange_name, symbol)
                
                # ‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                await asyncio.sleep(30)  # 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                
            except Exception as e:
                self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏•‡∏π‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î {exchange_name}: {e}")
                await asyncio.sleep(60)  # ‡∏£‡∏≠ 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
    
    async def _process_symbol(self, exchange_name: str, symbol: str):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö symbol ‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÜ"""
        try:
            # ‡∏î‡∏∂‡∏á config ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö symbol ‡∏ô‡∏µ‡πâ
            config = self.trading_config.get(exchange_name, {}).get(symbol)
            if not config or "error" in config:
                return
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö risk management
            if not await self._check_risk_limits(exchange_name, symbol):
                return
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            ticker = await self.exchange_manager.fetch_ticker(exchange_name, symbol)
            if not ticker:
                return
            
            current_price = ticker['last']
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            await self._check_existing_orders(exchange_name, symbol)
            
            # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏ó‡∏£‡∏î
            await self._make_trading_decision(exchange_name, symbol, current_price, config)
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• {exchange_name}:{symbol}: {e}")
    
    async def _check_risk_limits(self, exchange_name: str, symbol: str) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô
            balance = self.exchange_manager.get_balance(exchange_name)
            if not balance:
                return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
            performance = self.performance.get(exchange_name, {})
            daily_loss = performance.get('daily_loss', 0)
            max_daily_loss = 0.05  # 5%
            
            if daily_loss > max_daily_loss:
                self.logger.warning(f"‚ö†Ô∏è {exchange_name} ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
                return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
            active_orders_count = len(self.active_orders.get(exchange_name, {}).get(symbol, []))
            max_orders = 5
            
            if active_orders_count >= max_orders:
                return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: {e}")
            return False
    
    async def _check_existing_orders(self, exchange_name: str, symbol: str):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà"""
        try:
            if exchange_name not in self.active_orders:
                self.active_orders[exchange_name] = {}
            
            if symbol not in self.active_orders[exchange_name]:
                self.active_orders[exchange_name][symbol] = []
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
            orders_to_remove = []
            
            for order in self.active_orders[exchange_name][symbol]:
                try:
                    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CEX
                    if exchange_name in self.exchange_manager.exchanges:
                        exchange = self.exchange_manager.get_exchange(exchange_name)
                        order_status = exchange.fetch_order(order['id'], symbol)
                        
                        if order_status['status'] in ['closed', 'canceled']:
                            orders_to_remove.append(order)
                            
                            if order_status['status'] == 'closed':
                                await self._handle_filled_order(exchange_name, symbol, order_status)
                    
                    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö DEX (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)
                    else:
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ on-chain
                        pass
                        
                except Exception as e:
                    self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå {order['id']}: {e}")
            
            # ‡∏•‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            for order in orders_to_remove:
                self.active_orders[exchange_name][symbol].remove(order)
                
        except Exception as e:
            self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: {e}")
    
    async def _handle_filled_order(self, exchange_name: str, symbol: str, order: Dict):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"""
        try:
            side = order['side']
            amount = order['amount']
            price = order['price']
            
            self.logger.info(f"‚úÖ ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {side} {amount} {symbol} @ {price} ‡πÉ‡∏ô {exchange_name}")
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            performance = self.performance[exchange_name]
            performance['total_trades'] += 1
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô (‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢)
            if side == 'sell':
                # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≥‡πÑ‡∏£
                profit = amount * price * 0.001  # 0.1% ‡∏Å‡∏≥‡πÑ‡∏£‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
                performance['total_profit'] += profit
                
                if profit > 0:
                    performance['profitable_trades'] += 1
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {e}")
    
    async def _make_trading_decision(self, exchange_name: str, symbol: str, 
                                   current_price: float, config: Dict):
        """‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏ó‡∏£‡∏î"""
        try:
            spreads = config.get('spreads', {})
            bid_spread = spreads.get('bid_spread', 0.001)
            ask_spread = spreads.get('ask_spread', 0.001)
            
            risk_mgmt = config.get('risk_management', {})
            min_amount = risk_mgmt.get('min_order_amount', 10.0)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤ bid ‡πÅ‡∏•‡∏∞ ask
            bid_price = current_price * (1 - bid_spread)
            ask_price = current_price * (1 + ask_spread)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            existing_orders = self.active_orders.get(exchange_name, {}).get(symbol, [])
            
            has_buy_order = any(order['side'] == 'buy' and abs(order['price'] - bid_price) < current_price * 0.001 
                               for order in existing_orders)
            has_sell_order = any(order['side'] == 'sell' and abs(order['price'] - ask_price) < current_price * 0.001 
                                for order in existing_orders)
            
            # ‡∏ß‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå buy ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
            if not has_buy_order:
                await self._place_order(exchange_name, symbol, 'buy', 'limit', min_amount, bid_price)
            
            # ‡∏ß‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå sell ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
            if not has_sell_order:
                await self._place_order(exchange_name, symbol, 'sell', 'limit', min_amount, ask_price)
                
        except Exception as e:
            self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏ó‡∏£‡∏î: {e}")
    
    async def _place_order(self, exchange_name: str, symbol: str, side: str, 
                          order_type: str, amount: float, price: float = None):
        """‡∏ß‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå"""
        try:
            order = await self.exchange_manager.place_order(
                exchange_name, symbol, order_type, side, amount, price
            )
            
            if order:
                # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
                if exchange_name not in self.active_orders:
                    self.active_orders[exchange_name] = {}
                if symbol not in self.active_orders[exchange_name]:
                    self.active_orders[exchange_name][symbol] = []
                
                self.active_orders[exchange_name][symbol].append(order)
                
                self.logger.info(f"üìù ‡∏ß‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: {side} {amount} {symbol} @ {price} ‡πÉ‡∏ô {exchange_name}")
                
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ: {e}")
    
    async def _config_update_loop(self):
        """‡∏•‡∏π‡∏õ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï config"""
        while self.is_running:
            try:
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï config ‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
                await asyncio.sleep(300)
                
                self.logger.info("üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï trading config")
                await self._load_trading_configs()
                
            except Exception as e:
                self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï config: {e}")
                await asyncio.sleep(60)
    
    async def _status_report_loop(self):
        """‡∏•‡∏π‡∏õ‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"""
        while self.is_running:
            try:
                # ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ
                await asyncio.sleep(600)
                
                await self._print_status_report()
                
            except Exception as e:
                self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {e}")
                await asyncio.sleep(60)
    
    async def _print_status_report(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"""
        print("\n" + "="*80)
        print("üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Multi-Exchange Trading Bot")
        print("="*80)
        print(f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        for exchange_name in self.exchange_manager.get_enabled_exchanges():
            print(f"\nüè¢ {exchange_name.upper()}")
            print("-" * 40)
            
            # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
            perf = self.performance.get(exchange_name, {})
            total_trades = perf.get('total_trades', 0)
            profitable_trades = perf.get('profitable_trades', 0)
            total_profit = perf.get('total_profit', 0)
            
            win_rate = (profitable_trades / total_trades * 100) if total_trades > 0 else 0
            
            print(f"üìà ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_trades}")
            print(f"‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≥‡πÑ‡∏£: {profitable_trades}")
            print(f"üìä ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ä‡∏ô‡∏∞: {win_rate:.1f}%")
            print(f"üí∞ ‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°: ${total_profit:.2f}")
            
            # ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
            active_orders_count = sum(len(orders) for orders in self.active_orders.get(exchange_name, {}).values())
            print(f"üìã ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà: {active_orders_count}")
            
            # ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            try:
                balance = self.exchange_manager.get_balance(exchange_name)
                if balance and 'total' in balance:
                    for currency, amount in balance['total'].items():
                        if amount > 0:
                            print(f"üí≥ {currency}: {amount:.4f}")
            except:
                pass
        
        print("\n" + "="*80)
    
    async def stop_trading(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        self.logger.info("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î")
        self.is_running = False
        
        # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        # await self._cancel_all_orders()
        
        # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        self.exchange_manager.close_all_connections()
        
        self.logger.info("‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    
    async def _cancel_all_orders(self):
        """‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        for exchange_name, symbols in self.active_orders.items():
            for symbol, orders in symbols.items():
                for order in orders:
                    try:
                        if exchange_name in self.exchange_manager.exchanges:
                            exchange = self.exchange_manager.get_exchange(exchange_name)
                            exchange.cancel_order(order['id'], symbol)
                            self.logger.info(f"‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå {order['id']} ‡πÉ‡∏ô {exchange_name}")
                    except Exception as e:
                        self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå {order['id']}: {e}")

# === Main function ===
async def run_multi_exchange_bot():
    """‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó‡πÄ‡∏ó‡∏£‡∏î‡∏î‡∏¥‡πâ‡∏á‡∏´‡∏•‡∏≤‡∏¢ exchange"""
    bot = MultiExchangeTradingBot()
    
    if await bot.initialize():
        await bot.start_trading()
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ")

# === Run ===
if __name__ == "__main__":
    asyncio.run(run_multi_exchange_bot()) 