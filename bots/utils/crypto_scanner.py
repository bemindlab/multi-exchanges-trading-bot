#!/usr/bin/env python3
"""
Crypto Pairs Scanner with MACD Signals
‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏π‡πà‡πÄ‡∏ó‡∏£‡∏î crypto ‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì MACD ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
"""

import asyncio
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import logging
from typing import Dict, List, Optional, Tuple
import ta
from dataclasses import dataclass
from .exchange_manager import ExchangeManager
import json

@dataclass
class MACDSignal:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MACD Signal"""
    symbol: str
    exchange: str
    timeframe: str
    signal_type: str  # 'long' ‡∏´‡∏£‡∏∑‡∏≠ 'short'
    macd_value: float
    macd_signal: float
    macd_histogram: float
    price: float
    volume: float
    timestamp: datetime
    strength: float  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì 0-100

@dataclass
class ScannerConfig:
    """‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Scanner"""
    timeframes: List[str] = None
    exchanges: List[str] = None
    trading_pairs: List[str] = None
    min_volume_24h: float = 100000  # ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    min_signal_strength: float = 60  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
    macd_fast: int = 12
    macd_slow: int = 26
    macd_signal_period: int = 9
    
    def __post_init__(self):
        if self.timeframes is None:
            self.timeframes = ['1h', '4h', '1d']
        if self.exchanges is None:
            self.exchanges = ['binance', 'gateio']
        if self.trading_pairs is None:
            self.trading_pairs = [
                'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'ADA/USDT', 'SOL/USDT',
                'XRP/USDT', 'DOT/USDT', 'AVAX/USDT', 'MATIC/USDT', 'LINK/USDT',
                'UNI/USDT', 'LTC/USDT', 'BCH/USDT', 'ALGO/USDT', 'VET/USDT',
                'FTM/USDT', 'ATOM/USDT', 'NEAR/USDT', 'SAND/USDT', 'MANA/USDT'
            ]

class CryptoPairsScanner:
    """‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì MACD ‡πÉ‡∏ô‡∏Ñ‡∏π‡πà‡πÄ‡∏ó‡∏£‡∏î crypto"""
    
    def __init__(self, config_path: str = "config.json"):
        self.exchange_manager = ExchangeManager(config_path)
        self.config = ScannerConfig()
        self.logger = self._setup_logger()
        self.scan_results = {}
        self.is_scanning = False
        
    def _setup_logger(self) -> logging.Logger:
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logger"""
        logger = logging.getLogger('CryptoScanner')
        logger.setLevel(logging.INFO)
        
        if not logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
            handler.setFormatter(formatter)
            logger.addHandler(handler)
        
        return logger
    
    async def initialize(self) -> bool:
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö exchanges"""
        self.logger.info("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Crypto Pairs Scanner")
        return self.exchange_manager.initialize_exchanges()
    
    def update_config(self, **kwargs):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ scanner"""
        for key, value in kwargs.items():
            if hasattr(self.config, key):
                setattr(self.config, key, value)
                self.logger.info(f"üìù ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ {key}: {value}")
    
    async def fetch_ohlcv_data(self, exchange_name: str, symbol: str, 
                              timeframe: str, limit: int = 100) -> Optional[pd.DataFrame]:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OHLCV ‡∏à‡∏≤‡∏Å exchange"""
        try:
            exchange = self.exchange_manager.get_exchange(exchange_name)
            if not exchange:
                return None
            
            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CEX ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (DEX ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö)
            if exchange_name not in self.exchange_manager.exchanges:
                return None
            
            ohlcv_data = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
            
            df = pd.DataFrame(ohlcv_data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df = df.set_index('timestamp')
            
            return df.sort_index()
            
        except Exception as e:
            self.logger.debug(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {symbol} ‡∏à‡∏≤‡∏Å {exchange_name}: {e}")
            return None
    
    def calculate_macd(self, df: pd.DataFrame) -> pd.DataFrame:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì MACD indicators"""
        try:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì MACD
            macd_indicator = ta.trend.MACD(
                close=df['close'],
                window_fast=self.config.macd_fast,
                window_slow=self.config.macd_slow,
                window_sign=self.config.macd_signal_period
            )
            
            df['macd'] = macd_indicator.macd()
            df['macd_signal'] = macd_indicator.macd_signal()
            df['macd_histogram'] = macd_indicator.macd_diff()
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì MACD crosses
            df['macd_cross_up'] = (
                (df['macd'] > 0) & 
                (df['macd'].shift(1) <= 0)
            )
            
            df['macd_cross_down'] = (
                (df['macd'] < 0) & 
                (df['macd'].shift(1) >= 0)
            )
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
            df['signal_strength'] = self._calculate_signal_strength(df)
            
            return df
            
        except Exception as e:
            self.logger.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì MACD: {e}")
            return df
    
    def _calculate_signal_strength(self, df: pd.DataFrame) -> pd.Series:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì MACD (0-100)"""
        try:
            # ‡πÉ‡∏ä‡πâ histogram ‡πÅ‡∏•‡∏∞ momentum ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
            histogram_abs = df['macd_histogram'].abs()
            histogram_max = histogram_abs.rolling(window=20).max()
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏à‡∏≤‡∏Å histogram (0-50)
            histogram_strength = (histogram_abs / histogram_max * 50).fillna(0)
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏à‡∏≤‡∏Å momentum (0-50)
            macd_momentum = df['macd'] - df['macd'].shift(1)
            momentum_abs = macd_momentum.abs()
            momentum_max = momentum_abs.rolling(window=20).max()
            momentum_strength = (momentum_abs / momentum_max * 50).fillna(0)
            
            # ‡∏£‡∏ß‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á
            total_strength = histogram_strength + momentum_strength
            
            return total_strength.clip(0, 100)
            
        except Exception as e:
            self.logger.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì: {e}")
            return pd.Series([0] * len(df), index=df.index)
    
    def detect_macd_signals(self, df: pd.DataFrame, symbol: str, 
                           exchange: str, timeframe: str) -> List[MACDSignal]:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì MACD"""
        signals = []
        
        if df is None or df.empty or len(df) < 2:
            return signals
        
        try:
            latest = df.iloc[-1]
            previous = df.iloc[-2]
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö volume ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
            volume_24h = df['volume'].tail(24).sum() if len(df) >= 24 else df['volume'].sum()
            if volume_24h < self.config.min_volume_24h:
                return signals
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö MACD Cross Up (Long Signal)
            if latest['macd_cross_up'] and latest['signal_strength'] >= self.config.min_signal_strength:
                signal = MACDSignal(
                    symbol=symbol,
                    exchange=exchange,
                    timeframe=timeframe,
                    signal_type='long',
                    macd_value=latest['macd'],
                    macd_signal=latest['macd_signal'],
                    macd_histogram=latest['macd_histogram'],
                    price=latest['close'],
                    volume=volume_24h,
                    timestamp=latest.name,
                    strength=latest['signal_strength']
                )
                signals.append(signal)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö MACD Cross Down (Short Signal)
            elif latest['macd_cross_down'] and latest['signal_strength'] >= self.config.min_signal_strength:
                signal = MACDSignal(
                    symbol=symbol,
                    exchange=exchange,
                    timeframe=timeframe,
                    signal_type='short',
                    macd_value=latest['macd'],
                    macd_signal=latest['macd_signal'],
                    macd_histogram=latest['macd_histogram'],
                    price=latest['close'],
                    volume=volume_24h,
                    timestamp=latest.name,
                    strength=latest['signal_strength']
                )
                signals.append(signal)
            
        except Exception as e:
            self.logger.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì {symbol}: {e}")
        
        return signals
    
    async def scan_single_pair(self, exchange_name: str, symbol: str, 
                              timeframe: str) -> List[MACDSignal]:
        """‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏π‡πà‡πÄ‡∏ó‡∏£‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
        signals = []
        
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OHLCV
            df = await self.fetch_ohlcv_data(exchange_name, symbol, timeframe, 100)
            if df is None or df.empty:
                return signals
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì MACD
            df = self.calculate_macd(df)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
            signals = self.detect_macd_signals(df, symbol, exchange_name, timeframe)
            
        except Exception as e:
            self.logger.debug(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πÅ‡∏Å‡∏ô {symbol} ‡πÉ‡∏ô {exchange_name}: {e}")
        
        return signals
    
    async def scan_all_pairs(self, timeframes: List[str] = None) -> Dict[str, List[MACDSignal]]:
        """‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏π‡πà‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        if timeframes is None:
            timeframes = self.config.timeframes
        
        self.logger.info(f"üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏π‡πà‡πÄ‡∏ó‡∏£‡∏î {len(self.config.trading_pairs)} ‡∏Ñ‡∏π‡πà ‡πÉ‡∏ô {len(timeframes)} timeframes")
        
        all_signals = {}
        tasks = []
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á tasks ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÅ‡∏ö‡∏ö concurrent
        for exchange_name in self.config.exchanges:
            if exchange_name not in self.exchange_manager.get_enabled_exchanges():
                continue
                
            for symbol in self.config.trading_pairs:
                for timeframe in timeframes:
                    task = self.scan_single_pair(exchange_name, symbol, timeframe)
                    tasks.append(task)
        
        # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÅ‡∏ö‡∏ö concurrent
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        for result in results:
            if isinstance(result, list):
                for signal in result:
                    key = f"{signal.exchange}_{signal.timeframe}"
                    if key not in all_signals:
                        all_signals[key] = []
                    all_signals[key].append(signal)
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
        for key in all_signals:
            all_signals[key].sort(key=lambda x: x.strength, reverse=True)
        
        self.scan_results = all_signals
        
        total_signals = sum(len(signals) for signals in all_signals.values())
        self.logger.info(f"‚úÖ ‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_signals}")
        
        return all_signals
    
    def get_top_signals(self, signal_type: str = None, limit: int = 10) -> List[MACDSignal]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"""
        all_signals = []
        
        for signals in self.scan_results.values():
            all_signals.extend(signals)
        
        # ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
        if signal_type:
            all_signals = [s for s in all_signals if s.signal_type == signal_type]
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
        all_signals.sort(key=lambda x: x.strength, reverse=True)
        
        return all_signals[:limit]
    
    def print_scan_results(self, timeframes: List[str] = None):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô"""
        if not self.scan_results:
            print("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏Å‡πà‡∏≠‡∏ô")
            return
        
        print("\n" + "="*100)
        print("üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô MACD Signals")
        print("="*100)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ
        total_signals = sum(len(signals) for signals in self.scan_results.values())
        long_signals = len([s for signals in self.scan_results.values() for s in signals if s.signal_type == 'long'])
        short_signals = len([s for signals in self.scan_results.values() for s in signals if s.signal_type == 'short'])
        
        print(f"üìä ‡∏™‡∏£‡∏∏‡∏õ: ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_signals} | Long: {long_signals} | Short: {short_signals}")
        print()
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì Long ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        top_long = self.get_top_signals('long', 5)
        if top_long:
            print("üü¢ TOP 5 LONG SIGNALS (MACD Cross Up)")
            print("-" * 80)
            for i, signal in enumerate(top_long, 1):
                print(f"{i}. {signal.symbol} ({signal.exchange.upper()}) - {signal.timeframe}")
                print(f"   üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: ${signal.price:,.4f} | üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á: {signal.strength:.1f}%")
                print(f"   üìà MACD: {signal.macd_value:.6f} | Signal: {signal.macd_signal:.6f}")
                print(f"   üìÖ ‡πÄ‡∏ß‡∏•‡∏≤: {signal.timestamp.strftime('%Y-%m-%d %H:%M:%S')}")
                print()
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì Short ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        top_short = self.get_top_signals('short', 5)
        if top_short:
            print("üî¥ TOP 5 SHORT SIGNALS (MACD Cross Down)")
            print("-" * 80)
            for i, signal in enumerate(top_short, 1):
                print(f"{i}. {signal.symbol} ({signal.exchange.upper()}) - {signal.timeframe}")
                print(f"   üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: ${signal.price:,.4f} | üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á: {signal.strength:.1f}%")
                print(f"   üìâ MACD: {signal.macd_value:.6f} | Signal: {signal.macd_signal:.6f}")
                print(f"   üìÖ ‡πÄ‡∏ß‡∏•‡∏≤: {signal.timestamp.strftime('%Y-%m-%d %H:%M:%S')}")
                print()
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏° timeframe
        print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏° Timeframe:")
        print("-" * 40)
        for key, signals in self.scan_results.items():
            if signals:
                exchange, timeframe = key.split('_', 1)
                long_count = len([s for s in signals if s.signal_type == 'long'])
                short_count = len([s for s in signals if s.signal_type == 'short'])
                print(f"{exchange.upper()} - {timeframe}: {len(signals)} ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì (Long: {long_count}, Short: {short_count})")
        
        print("\n" + "="*100)
    
    def export_signals_to_json(self, filename: str = None) -> str:
        """‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"temp/macd_signals_{timestamp}.json"
        
        export_data = {
            "scan_time": datetime.now().isoformat(),
            "config": {
                "timeframes": self.config.timeframes,
                "exchanges": self.config.exchanges,
                "min_signal_strength": self.config.min_signal_strength,
                "macd_settings": {
                    "fast": self.config.macd_fast,
                    "slow": self.config.macd_slow,
                    "signal": self.config.macd_signal_period
                }
            },
            "signals": {}
        }
        
        for key, signals in self.scan_results.items():
            export_data["signals"][key] = []
            for signal in signals:
                export_data["signals"][key].append({
                    "symbol": signal.symbol,
                    "exchange": signal.exchange,
                    "timeframe": signal.timeframe,
                    "signal_type": signal.signal_type,
                    "price": signal.price,
                    "strength": signal.strength,
                    "macd_value": signal.macd_value,
                    "macd_signal": signal.macd_signal,
                    "macd_histogram": signal.macd_histogram,
                    "volume_24h": signal.volume,
                    "timestamp": signal.timestamp.isoformat()
                })
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå temp ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        import os
        os.makedirs('temp', exist_ok=True)
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(export_data, f, indent=2, ensure_ascii=False)
        
        self.logger.info(f"üìÅ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå: {filename}")
        return filename
    
    async def start_continuous_scan(self, interval_minutes: int = 15):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"""
        self.is_scanning = True
        self.logger.info(f"üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏∏‡∏Å {interval_minutes} ‡∏ô‡∏≤‡∏ó‡∏µ")
        
        while self.is_scanning:
            try:
                await self.scan_all_pairs()
                self.print_scan_results()
                
                # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏î‡∏µ
                top_signals = self.get_top_signals(limit=20)
                if top_signals:
                    self.export_signals_to_json()
                
                # ‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                await asyncio.sleep(interval_minutes * 60)
                
            except KeyboardInterrupt:
                self.logger.info("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
                break
            except Exception as e:
                self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô: {e}")
                await asyncio.sleep(60)  # ‡∏£‡∏≠ 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        
        self.is_scanning = False
    
    def stop_scanning(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô"""
        self.is_scanning = False
        self.logger.info("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô")

# === Main Functions ===
async def run_single_scan(timeframes: List[str] = None, exchanges: List[str] = None):
    """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
    scanner = CryptoPairsScanner()
    
    if not await scanner.initialize():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö exchange ‡πÑ‡∏î‡πâ")
        return
    
    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    if timeframes:
        scanner.update_config(timeframes=timeframes)
    if exchanges:
        scanner.update_config(exchanges=exchanges)
    
    # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
    await scanner.scan_all_pairs()
    scanner.print_scan_results()
    
    # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    scanner.export_signals_to_json()
    
    return scanner.scan_results

async def run_continuous_scan(interval_minutes: int = 15):
    """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"""
    scanner = CryptoPairsScanner()
    
    if not await scanner.initialize():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö exchange ‡πÑ‡∏î‡πâ")
        return
    
    try:
        await scanner.start_continuous_scan(interval_minutes)
    except KeyboardInterrupt:
        scanner.stop_scanning()

# === Run ===
if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "continuous":
        interval = int(sys.argv[2]) if len(sys.argv) > 2 else 15
        asyncio.run(run_continuous_scan(interval))
    else:
        # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        timeframes = ['1h', '4h', '1d']  # ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ
        asyncio.run(run_single_scan(timeframes)) 