#!/usr/bin/env python3
import asyncio
import click
import json
import os
from datetime import datetime
from bots.exchange_manager import ExchangeManager
from bots.market_analyzer import MultiExchangeMarketAnalyzer, run_market_analysis
from bots.multi_exchange_bot import MultiExchangeTradingBot, run_multi_exchange_bot
from bots.crypto_scanner import CryptoPairsScanner, run_single_scan, run_continuous_scan
from config_manager import ConfigManager, ensure_config_exists

@click.group()
@click.version_option(version='2.0.0')
def cli():
    """ü§ñ Multi-Exchange Trading Bot CLI
    
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÉ‡∏ô CEX ‡πÅ‡∏•‡∏∞ DEX ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡πà‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    """
    pass

@cli.command()
@click.option('--config', '-c', default='config.json', help='‡πÑ‡∏ü‡∏•‡πå config')
def list_exchanges(config):
    """üìã ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ exchanges ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö"""
    click.echo("üè¢ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Exchanges ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:")
    click.echo("=" * 50)
    
    # CEX
    click.echo("\nüí± Centralized Exchanges (CEX):")
    cex_list = [
        "binance - Binance",
        "gateio - Gate.io", 
        "okx - OKX",
        "kucoin - KuCoin",
        "bybit - Bybit",
        "huobi - Huobi"
    ]
    for exchange in cex_list:
        click.echo(f"  ‚úÖ {exchange}")
    
    # DEX
    click.echo("\nüîÑ Decentralized Exchanges (DEX):")
    dex_list = [
        "uniswap_v3 - Uniswap V3 (Ethereum)",
        "pancakeswap - PancakeSwap (BSC)",
        "sushiswap - SushiSwap (Multi-chain)",
        "quickswap - QuickSwap (Polygon)"
    ]
    for exchange in dex_list:
        click.echo(f"  üîÑ {exchange}")
    
    click.echo("\nüí° ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á 'setup' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ exchanges")

@cli.command()
@click.option('--config', '-c', default='config.json', help='‡πÑ‡∏ü‡∏•‡πå config')
def status(config):
    """üìä ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ exchanges"""
    try:
        exchange_manager = ExchangeManager(config)
        
        if exchange_manager.initialize_exchanges():
            click.echo("‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠:")
            click.echo("=" * 40)
            
            enabled_exchanges = exchange_manager.get_enabled_exchanges()
            for exchange_name in enabled_exchanges:
                trading_pairs = exchange_manager.get_trading_pairs(exchange_name)
                click.echo(f"üè¢ {exchange_name.upper()}: ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß ({len(trading_pairs)} ‡∏Ñ‡∏π‡πà‡πÄ‡∏ó‡∏£‡∏î)")
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô
                try:
                    balance = exchange_manager.get_balance(exchange_name)
                    if balance and 'total' in balance:
                        for currency, amount in balance['total'].items():
                            if amount > 0:
                                click.echo(f"  üí∞ {currency}: {amount:.4f}")
                except:
                    click.echo("  üí∞ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)")
        else:
            click.echo("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö exchange ‡πÉ‡∏î‡πÜ ‡πÑ‡∏î‡πâ")
            
    except Exception as e:
        click.echo(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

@cli.command()
@click.option('--symbol', '-s', default='BTC/USDT', help='Trading pair')
@click.option('--config', '-c', default='config.json', help='‡πÑ‡∏ü‡∏•‡πå config')
def analyze(symbol, config):
    """üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å exchanges"""
    click.echo(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå {symbol} ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å exchanges...")
    
    try:
        results = asyncio.run(run_market_analysis())
        if results:
            click.echo("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        else:
            click.echo("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ")
    except Exception as e:
        click.echo(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

@cli.command()
@click.option('--symbol', '-s', default='BTC/USDT', help='Trading pair')
@click.option('--interval', '-i', default=300, help='‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)')
@click.option('--config', '-c', default='config.json', help='‡πÑ‡∏ü‡∏•‡πå config')
def monitor(symbol, interval, config):
    """üìä ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"""
    click.echo(f"üìä ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° {symbol} ‡∏ó‡∏∏‡∏Å {interval} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    click.echo("‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î")
    
    try:
        analyzer = MultiExchangeMarketAnalyzer(config)
        asyncio.run(analyzer.run_continuous_analysis(symbol, interval))
    except KeyboardInterrupt:
        click.echo("\n‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°")
    except Exception as e:
        click.echo(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

@cli.command()
@click.option('--config', '-c', default='config.json', help='‡πÑ‡∏ü‡∏•‡πå config')
@click.option('--dry-run', is_flag=True, help='‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á')
def trade(config, dry_run):
    """üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
    if dry_run:
        click.echo("üß™ ‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡πÑ‡∏°‡πà‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á)")
    else:
        click.echo("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á")
        
    click.echo("‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î")
    
    try:
        asyncio.run(run_multi_exchange_bot())
    except KeyboardInterrupt:
        click.echo("\n‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î")
    except Exception as e:
        click.echo(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

@cli.command()
@click.option('--force', is_flag=True, help='‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå config ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà')
def setup(force):
    """‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"""
    click.echo("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Multi-Exchange Trading Bot")
    click.echo("=" * 50)
    
    # ‡πÉ‡∏ä‡πâ ConfigManager
    config_manager = ConfigManager()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå config
    if config_manager.config_exists() and not force:
        if not click.confirm('‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå config.json ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?'):
            click.echo("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
            click.echo("üí° ‡πÉ‡∏ä‡πâ --force ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö")
            return
        force = True
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á config ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    config = {
        "exchanges": {},
        "trading_strategy": {
            "strategy_type": "market_making",
            "timeframe": "1m",
            "indicators": ["sma", "ema", "rsi", "macd"],
            "risk_management": {
                "max_position_size": 0.1,
                "stop_loss": 0.02,
                "take_profit": 0.03,
                "max_daily_loss": 0.05
            }
        },
        "bot_settings": {
            "check_interval": 30,
            "log_level": "INFO",
            "log_file": "temp/trading_bot.log",
            "telegram_notifications": {
                "enabled": False,
                "bot_token": "",
                "chat_id": ""
            },
            "database": {
                "enabled": True,
                "type": "sqlite",
                "path": "temp/trading_data.db"
            }
        }
    }
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ exchanges
    click.echo("\nüè¢ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Exchanges:")
    
    # Binance
    if click.confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ Binance?'):
        config["exchanges"]["binance"] = {
            "enabled": True,
            "type": "cex",
            "api_key": "",
            "secret": "",
            "sandbox": True,
            "trading_pairs": ["BTC/USDT", "ETH/USDT"],
            "min_order_amount": 10.0,
            "max_order_amount": 1000.0,
            "fee_rate": 0.001
        }
    
    # Gate.io
    if click.confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ Gate.io?'):
        config["exchanges"]["gateio"] = {
            "enabled": True,
            "type": "cex",
            "api_key": "",
            "secret": "",
            "sandbox": True,
            "trading_pairs": ["BTC/USDT", "ETH/USDT"],
            "min_order_amount": 10.0,
            "max_order_amount": 1000.0,
            "fee_rate": 0.002
        }
    
    # DEX
    if click.confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ DEX (Uniswap V3)?'):
        config["exchanges"]["uniswap_v3"] = {
            "enabled": True,
            "type": "dex",
            "network": "ethereum",
            "rpc_url": "https://mainnet.infura.io/v3/YOUR_PROJECT_ID",
            "private_key": "",
            "wallet_address": "",
            "trading_pairs": ["WETH/USDC"],
            "slippage": 0.005,
            "gas_limit": 300000,
            "max_gas_price": 50
        }
    
    # ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å template ‡∏Å‡πà‡∏≠‡∏ô
    if config_manager.template_exists():
        click.echo("\nüîß ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå template ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á config ‡∏à‡∏≤‡∏Å template...")
        if config_manager.create_config_from_template(force=force):
            click.echo("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå config.json ‡∏à‡∏≤‡∏Å template ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        else:
            click.echo("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å template ‡πÑ‡∏î‡πâ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏ö interactive...")
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å config ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
            with open('config.json', 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=4, ensure_ascii=False)
            click.echo("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå config.json ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    else:
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å config ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
        with open('config.json', 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=4, ensure_ascii=False)
        click.echo("\n‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå config.json ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .env ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    if not os.path.exists('.env'):
        env_content = """# CEX API Keys
BINANCE_API_KEY=your_binance_api_key_here
BINANCE_SECRET=your_binance_secret_here
BINANCE_SANDBOX=true

GATEIO_API_KEY=your_gateio_api_key_here
GATEIO_SECRET=your_gateio_secret_here
GATEIO_SANDBOX=true

# DEX Settings
ETHEREUM_RPC_URL=https://mainnet.infura.io/v3/YOUR_PROJECT_ID
ETHEREUM_PRIVATE_KEY=your_ethereum_private_key_here

# Telegram Bot
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here
TELEGRAM_CHAT_ID=your_telegram_chat_id_here
"""
        with open('.env', 'w') as f:
            f.write(env_content)
        
        click.echo("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .env ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    
    click.echo("\nüìù ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:")
    click.echo("1. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå .env ‡πÉ‡∏™‡πà API keys ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
    click.echo("2. ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á 'status' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")
    click.echo("3. ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á 'analyze' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î")
    click.echo("4. ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á 'trade' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ó‡∏£‡∏î")

@cli.command()
@click.option('--exchange', '-e', help='‡∏ä‡∏∑‡πà‡∏≠ exchange')
@click.option('--symbol', '-s', help='Trading pair')
@click.option('--config', '-c', default='config.json', help='‡πÑ‡∏ü‡∏•‡πå config')
def balance(exchange, symbol, config):
    """üí∞ ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"""
    try:
        exchange_manager = ExchangeManager(config)
        
        if not exchange_manager.initialize_exchanges():
            click.echo("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö exchange ‡πÑ‡∏î‡πâ")
            return
        
        enabled_exchanges = exchange_manager.get_enabled_exchanges()
        
        if exchange and exchange not in enabled_exchanges:
            click.echo(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö exchange: {exchange}")
            return
        
        exchanges_to_check = [exchange] if exchange else enabled_exchanges
        
        click.echo("üí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:")
        click.echo("=" * 40)
        
        for exchange_name in exchanges_to_check:
            click.echo(f"\nüè¢ {exchange_name.upper()}:")
            
            balance_data = exchange_manager.get_balance(exchange_name)
            if balance_data and 'total' in balance_data:
                for currency, amount in balance_data['total'].items():
                    if amount > 0:
                        free_amount = balance_data.get('free', {}).get(currency, 0)
                        used_amount = balance_data.get('used', {}).get(currency, 0)
                        click.echo(f"  {currency}: {amount:.6f} (‡∏ß‡πà‡∏≤‡∏á: {free_amount:.6f}, ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: {used_amount:.6f})")
            else:
                click.echo("  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ")
                
    except Exception as e:
        click.echo(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

@cli.command()
@click.option('--config', '-c', default='config.json', help='‡πÑ‡∏ü‡∏•‡πå config')
def test_connection(config):
    """üîß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ exchanges"""
    click.echo("üîß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...")
    
    try:
        exchange_manager = ExchangeManager(config)
        
        # ‡πÇ‡∏´‡∏•‡∏î config
        with open(config, 'r', encoding='utf-8') as f:
            config_data = json.load(f)
        
        exchanges_config = config_data.get('exchanges', {})
        
        for exchange_name, exchange_config in exchanges_config.items():
            if not exchange_config.get('enabled', False):
                click.echo(f"‚è≠Ô∏è {exchange_name}: ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                continue
            
            click.echo(f"üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö {exchange_name}...")
            
            if exchange_config.get('type') == 'cex':
                # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö CEX
                try:
                    if exchange_manager._initialize_cex(exchange_name, exchange_config):
                        click.echo(f"‚úÖ {exchange_name}: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    else:
                        click.echo(f"‚ùå {exchange_name}: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                except Exception as e:
                    click.echo(f"‚ùå {exchange_name}: {e}")
            
            elif exchange_config.get('type') == 'dex':
                # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö DEX
                try:
                    if exchange_manager._initialize_dex(exchange_name, exchange_config):
                        click.echo(f"‚úÖ {exchange_name}: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    else:
                        click.echo(f"‚ùå {exchange_name}: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                except Exception as e:
                    click.echo(f"‚ùå {exchange_name}: {e}")
        
    except Exception as e:
        click.echo(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

@cli.command()
@click.option('--timeframes', '-t', multiple=True, help='Timeframes ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô (‡πÄ‡∏ä‡πà‡∏ô 1h,4h,1d)')
@click.option('--exchanges', '-e', multiple=True, help='Exchanges ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô')
@click.option('--pairs', '-p', multiple=True, help='Trading pairs ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô')
@click.option('--min-strength', '-s', default=60, help='‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (0-100)')
@click.option('--min-volume', '-v', default=100000, help='‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 24h')
@click.option('--config', '-c', default='config.json', help='‡πÑ‡∏ü‡∏•‡πå config')
def scan(timeframes, exchanges, pairs, min_strength, min_volume, config):
    """üîç ‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏π‡πà‡πÄ‡∏ó‡∏£‡∏î crypto ‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì MACD"""
    click.echo("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏π‡πà‡πÄ‡∏ó‡∏£‡∏î crypto ‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì MACD")
    click.echo("=" * 60)
    
    try:
        # ‡πÅ‡∏õ‡∏•‡∏á timeframes
        tf_list = list(timeframes) if timeframes else ['1h', '4h', '1d']
        ex_list = list(exchanges) if exchanges else None
        
        click.echo(f"üìä Timeframes: {', '.join(tf_list)}")
        click.echo(f"üè¢ Exchanges: {', '.join(ex_list) if ex_list else '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'}")
        click.echo(f"üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥: {min_strength}%")
        click.echo(f"üìä ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥: {min_volume:,}")
        click.echo()
        
        # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
        results = asyncio.run(run_single_scan(tf_list, ex_list))
        
        if results:
            total_signals = sum(len(signals) for signals in results.values())
            click.echo(f"‚úÖ ‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_signals}")
        else:
            click.echo("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì")
            
    except Exception as e:
        click.echo(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

@cli.command()
@click.option('--interval', '-i', default=15, help='‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô (‡∏ô‡∏≤‡∏ó‡∏µ)')
@click.option('--timeframes', '-t', multiple=True, help='Timeframes ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô')
@click.option('--config', '-c', default='config.json', help='‡πÑ‡∏ü‡∏•‡πå config')
def scan_continuous(interval, timeframes, config):
    """üîÑ ‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏π‡πà‡πÄ‡∏ó‡∏£‡∏î crypto ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"""
    click.echo(f"üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏π‡πà‡πÄ‡∏ó‡∏£‡∏î crypto ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏∏‡∏Å {interval} ‡∏ô‡∏≤‡∏ó‡∏µ")
    click.echo("‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î")
    
    try:
        asyncio.run(run_continuous_scan(interval))
    except KeyboardInterrupt:
        click.echo("\n‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô")
    except Exception as e:
        click.echo(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

@cli.command()
@click.option('--symbol', '-s', required=True, help='Trading pair (‡πÄ‡∏ä‡πà‡∏ô BTC/USDT)')
@click.option('--timeframe', '-t', default='1h', help='Timeframe (‡πÄ‡∏ä‡πà‡∏ô 1h, 4h, 1d)')
@click.option('--exchange', '-e', default='binance', help='Exchange name')
@click.option('--config', '-c', default='config.json', help='‡πÑ‡∏ü‡∏•‡πå config')
def macd_check(symbol, timeframe, exchange, config):
    """üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì MACD ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡πà‡πÄ‡∏ó‡∏£‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞"""
    click.echo(f"üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì MACD: {symbol} ({exchange.upper()}) - {timeframe}")
    click.echo("=" * 60)
    
    try:
        async def check_single():
            scanner = CryptoPairsScanner(config)
            if not await scanner.initialize():
                click.echo("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö exchange ‡πÑ‡∏î‡πâ")
                return
            
            # ‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏π‡πà‡πÄ‡∏ó‡∏£‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            signals = await scanner.scan_single_pair(exchange, symbol, timeframe)
            
            if signals:
                for signal in signals:
                    signal_emoji = "üü¢" if signal.signal_type == "long" else "üî¥"
                    click.echo(f"{signal_emoji} ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì {signal.signal_type.upper()} ‡∏û‡∏ö!")
                    click.echo(f"   üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: ${signal.price:,.4f}")
                    click.echo(f"   üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á: {signal.strength:.1f}%")
                    click.echo(f"   üìà MACD: {signal.macd_value:.6f}")
                    click.echo(f"   üìâ Signal: {signal.macd_signal:.6f}")
                    click.echo(f"   üìä Histogram: {signal.macd_histogram:.6f}")
                    click.echo(f"   üìÖ ‡πÄ‡∏ß‡∏•‡∏≤: {signal.timestamp.strftime('%Y-%m-%d %H:%M:%S')}")
            else:
                click.echo("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì MACD")
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MACD ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                df = await scanner.fetch_ohlcv_data(exchange, symbol, timeframe, 50)
                if df is not None and not df.empty:
                    df = scanner.calculate_macd(df)
                    latest = df.iloc[-1]
                    
                    click.echo("\nüìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MACD ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:")
                    click.echo(f"   üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: ${latest['close']:,.4f}")
                    click.echo(f"   üìà MACD: {latest['macd']:.6f}")
                    click.echo(f"   üìâ Signal: {latest['macd_signal']:.6f}")
                    click.echo(f"   üìä Histogram: {latest['macd_histogram']:.6f}")
                    
                    if latest['macd'] > 0:
                        click.echo("   üü¢ MACD ‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ 0 (‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ö‡∏ß‡∏Å)")
                    else:
                        click.echo("   üî¥ MACD ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ï‡πâ 0 (‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏•‡∏ö)")
        
        asyncio.run(check_single())
        
    except Exception as e:
        click.echo(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

@cli.command()
@click.option('--action', type=click.Choice(['create', 'validate', 'backup', 'show', 'export', 'summary']), 
              default='show', help='‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö config')
@click.option('--config', '-c', default='config.json', help='‡πÑ‡∏ü‡∏•‡πå config')
@click.option('--template', default='config.template.json', help='‡πÑ‡∏ü‡∏•‡πå template')
@click.option('--force', is_flag=True, help='‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö')
@click.option('--output', '-o', help='‡πÑ‡∏ü‡∏•‡πå output ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö export')
@click.option('--verbose', '-v', is_flag=True, help='‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î')
def config(action, config, template, force, output, verbose):
    """‚öôÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå config"""
    config_manager = ConfigManager(config, template)
    
    if action == 'create':
        click.echo("üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå config ‡∏à‡∏≤‡∏Å template...")
        if config_manager.create_config_from_template(force=force):
            click.echo("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
            summary = config_manager.get_config_summary()
            if summary.get('enabled_exchanges'):
                click.echo(f"üè¢ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: {', '.join(summary['enabled_exchanges'])}")
        else:
            click.echo("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ")
            
    elif action == 'validate':
        click.echo("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå config...")
        if config_manager.validate_config():
            click.echo("‚úÖ Config ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        else:
            click.echo("‚ùå Config ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
            
    elif action == 'backup':
        click.echo("üíæ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå config...")
        if config_manager.backup_config():
            click.echo("‚úÖ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        else:
            click.echo("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏î‡πâ")
    
    elif action == 'export':
        click.echo("üì§ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å config template...")
        if config_manager.export_config_template(output):
            click.echo("‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        else:
            click.echo("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ")
    
    elif action == 'summary':
        click.echo("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Config:")
        click.echo("=" * 50)
        
        summary = config_manager.get_config_summary()
        if summary:
            click.echo(f"üìÅ Config file: {'‚úÖ ‡∏°‡∏µ' if summary['config_exists'] else '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ'}")
            click.echo(f"üìÑ Template file: {'‚úÖ ‡∏°‡∏µ' if summary['template_exists'] else '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ'}")
            click.echo(f"üè¢ Exchanges: {summary['total_exchanges']} ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î, {len(summary['enabled_exchanges'])} ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            if summary['enabled_exchanges']:
                click.echo(f"   ‚îú‚îÄ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: {', '.join(summary['enabled_exchanges'])}")
            click.echo(f"üìà Strategy: {summary['trading_strategy']} ({summary['timeframe']})")
            click.echo(f"üìù Log file: {summary['log_file']}")
            click.echo(f"üì± Telegram: {'‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î' if summary['telegram_enabled'] else '‚ùå ‡∏õ‡∏¥‡∏î'}")
            click.echo(f"üóÑÔ∏è Database: {'‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î' if summary['database_enabled'] else '‚ùå ‡∏õ‡∏¥‡∏î'}")
        else:
            click.echo("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î config ‡πÑ‡∏î‡πâ")
            
    elif action == 'show':
        click.echo("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Config:")
        click.echo("=" * 40)
        
        if config_manager.config_exists():
            click.echo(f"‚úÖ Config file: {config}")
            enabled_exchanges = config_manager.get_enabled_exchanges()
            if enabled_exchanges:
                click.echo(f"üè¢ Exchanges ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: {', '.join(enabled_exchanges)}")
            else:
                click.echo("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ exchange ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                
            if verbose:
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏î‡∏¢‡∏ã‡πà‡∏≠‡∏ô sensitive data
                config_data = config_manager.load_config()
                if config_data:
                    sanitized = config_manager.sanitize_config_for_display(config_data)
                    click.echo("\nüìÑ Config content (sensitive data masked):")
                    click.echo(json.dumps(sanitized, indent=2, ensure_ascii=False))
        else:
            click.echo(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {config}")
            
        if config_manager.template_exists():
            click.echo(f"üìÑ Template file: {template}")
        else:
            click.echo(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö template: {template}")
            click.echo("üí° ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á 'setup' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á template")

@cli.command()
def version():
    """üìã ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô"""
    click.echo("ü§ñ Multi-Exchange Trading Bot v2.0.0")
    click.echo("‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö CEX ‡πÅ‡∏•‡∏∞ DEX ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡πà‡∏á")
    click.echo("‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏î‡πâ‡∏ß‡∏¢ Python + CCXT + Web3")
    click.echo("üîç ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Crypto Scanner ‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì MACD")

if __name__ == '__main__':
    cli() 