version: "3.8"

services:
  # Main Trading Bot Application
  trading-bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: trading-bot-prod
    restart: always
    environment:
      - ENVIRONMENT=production
      - DEBUG=0
      - PYTHONPATH=/app
      - MQTT_HOST=mqtt-broker
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mqtt-broker:
        condition: service_healthy
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 2G
        reservations:
          cpus: "1.0"
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: ["python", "main.py", "--mode", "webhook"]

  # PostgreSQL Database with High Availability
  postgres:
    image: postgres:15-alpine
    container_name: postgres-prod
    restart: always
    environment:
      POSTGRES_DB: trading_db
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    ports:
      - "127.0.0.1:5432:5432" # Bind to localhost only
    networks:
      - trading-network
    secrets:
      - postgres_password
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]

  # Redis Cache with Persistence
  redis:
    image: redis:7-alpine
    container_name: redis-prod
    restart: always
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "127.0.0.1:6379:6379" # Bind to localhost only
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MQTT Broker with Authentication
  mqtt-broker:
    image: eclipse-mosquitto:2.0
    container_name: mqtt-broker-prod
    restart: always
    volumes:
      - ./config/mosquitto/mosquitto.prod.conf:/mosquitto/config/mosquitto.conf
      - ./config/mosquitto/passwd:/mosquitto/config/passwd
      - mqtt_data:/mosquitto/data
      - mqtt_logs:/mosquitto/log
    ports:
      - "127.0.0.1:1883:1883" # MQTT - localhost only
      - "8883:8883" # MQTT over SSL
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    healthcheck:
      test: ["CMD-SHELL", "mosquitto_pub -h localhost -t health -m ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # n8n Workflow Automation (Production)
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n-prod
    restart: always
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER_FILE=/run/secrets/n8n_user
      - N8N_BASIC_AUTH_PASSWORD_FILE=/run/secrets/n8n_password
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - WEBHOOK_URL=https://your-domain.com/n8n
      - GENERIC_TIMEZONE=Asia/Bangkok
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n_db
      - DB_POSTGRESDB_USER=trading_user
      - DB_POSTGRESDB_PASSWORD_FILE=/run/secrets/postgres_password
      - N8N_ENCRYPTION_KEY_FILE=/run/secrets/n8n_encryption_key
      - N8N_USER_MANAGEMENT_DISABLED=false
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_VERSION_NOTIFICATIONS_ENABLED=false
      - N8N_TEMPLATES_ENABLED=true
      - N8N_PUBLIC_API_DISABLED=true
      - N8N_METRICS=true
      - N8N_LOG_LEVEL=info
      - N8N_LOG_OUTPUT=file
      - N8N_SECURE_COOKIE=true
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
    volumes:
      - n8n_data:/home/node/.n8n
      - ./config/n8n:/home/node/.n8n/config:ro
      - ./logs/n8n:/home/node/.n8n/logs
    ports:
      - "127.0.0.1:5678:5678" # Bind to localhost only
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mqtt-broker:
        condition: service_healthy
      trading-bot:
        condition: service_healthy
    networks:
      - trading-network
    secrets:
      - n8n_user
      - n8n_password
      - n8n_encryption_key
      - postgres_password
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:5678/healthz",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Hummingbot Instance
  hummingbot:
    image: hummingbot/hummingbot:latest
    container_name: hummingbot-prod
    restart: always
    environment:
      - CONFIG_PASSWORD_FILE=/run/secrets/hummingbot_password
    volumes:
      - ./config/hummingbot:/conf:ro
      - ./logs/hummingbot:/logs
      - hummingbot_data:/data
    depends_on:
      mqtt-broker:
        condition: service_healthy
    networks:
      - trading-network
    secrets:
      - hummingbot_password
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-prod
    restart: always
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "127.0.0.1:3000:3000" # Bind to localhost only
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - trading-network
    secrets:
      - grafana_password
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-prod
    restart: always
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=30d"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
    volumes:
      - ./config/prometheus/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "127.0.0.1:9090:9090" # Bind to localhost only
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: nginx-prod
    restart: always
    volumes:
      - ./config/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - trading-bot
      - grafana
      - n8n
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M

  # Log Aggregator (Fluentd)
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: fluentd-prod
    restart: always
    volumes:
      - ./config/fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/var/log/app:ro
    ports:
      - "127.0.0.1:24224:24224"
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: backup-prod
    restart: "no"
    environment:
      - PGPASSWORD_FILE=/run/secrets/postgres_password
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      - postgres
    networks:
      - trading-network
    secrets:
      - postgres_password
    command: ["sh", "/backup.sh"]
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/trading-bot/data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/trading-bot/data/redis
  mqtt_data:
    driver: local
  mqtt_logs:
    driver: local
  hummingbot_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  n8n_data:
    driver: local

networks:
  trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  hummingbot_password:
    file: ./secrets/hummingbot_password.txt
  grafana_password:
    file: ./secrets/grafana_password.txt
  n8n_user:
    file: ./secrets/n8n_user.txt
  n8n_password:
    file: ./secrets/n8n_password.txt
  n8n_encryption_key:
    file: ./secrets/n8n_encryption_key.txt
