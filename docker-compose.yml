version: "3.8"

services:
  # Main Trading Bot Application
  trading-bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: trading-bot-dev
    restart: unless-stopped
    environment:
      - ENVIRONMENT=development
      - DEBUG=1
      - PYTHONPATH=/app
      - MQTT_HOST=mqtt-broker
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
    volumes:
      - ./src:/app/src
      - ./config:/app/config
      - ./logs:/app/logs
      - ./temp:/app/temp
      - ./.env:/app/.env
    ports:
      - "8000:8000" # Flask API
      - "8080:8080" # Dashboard
    depends_on:
      - postgres
      - redis
      - mqtt-broker
    networks:
      - trading-network
    command: ["python", "main.py", "--mode", "webhook"]

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: trading_db
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis-dev
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_pass
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MQTT Broker (Eclipse Mosquitto)
  mqtt-broker:
    image: eclipse-mosquitto:2.0
    container_name: mqtt-broker-dev
    restart: unless-stopped
    volumes:
      - ./config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mqtt_data:/mosquitto/data
      - mqtt_logs:/mosquitto/log
    ports:
      - "1883:1883" # MQTT
      - "9001:9001" # WebSocket
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "mosquitto_pub -h localhost -t test -m test"]
      interval: 30s
      timeout: 10s
      retries: 3

  # n8n Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n-dev
    restart: unless-stopped
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=n8n_pass
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678
      - GENERIC_TIMEZONE=Asia/Bangkok
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n_db
      - DB_POSTGRESDB_USER=trading_user
      - DB_POSTGRESDB_PASSWORD=trading_pass
      - N8N_ENCRYPTION_KEY=n8n_encryption_key_dev
      - N8N_USER_MANAGEMENT_DISABLED=true
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_VERSION_NOTIFICATIONS_ENABLED=false
      - N8N_TEMPLATES_ENABLED=true
      - N8N_PUBLIC_API_DISABLED=false
      - N8N_METRICS=true
    volumes:
      - n8n_data:/home/node/.n8n
      - ./config/n8n:/home/node/.n8n/config
      - ./logs/n8n:/home/node/.n8n/logs
    ports:
      - "5678:5678"
    depends_on:
      - postgres
      - redis
      - mqtt-broker
      - trading-bot
    networks:
      - trading-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:5678/healthz",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Hummingbot Instance
  hummingbot:
    image: hummingbot/hummingbot:latest
    container_name: hummingbot-dev
    restart: unless-stopped
    environment:
      - CONFIG_PASSWORD=hummingbot_pass
    volumes:
      - ./config/hummingbot:/conf
      - ./logs/hummingbot:/logs
      - hummingbot_data:/data
    depends_on:
      - mqtt-broker
    networks:
      - trading-network
    stdin_open: true
    tty: true

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-dev
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - postgres
    networks:
      - trading-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-dev
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - trading-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nginx-dev
    restart: unless-stopped
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/conf.d:/etc/nginx/conf.d
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - trading-bot
      - grafana
      - n8n
    networks:
      - trading-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mqtt_data:
    driver: local
  mqtt_logs:
    driver: local
  hummingbot_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  n8n_data:
    driver: local

networks:
  trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
