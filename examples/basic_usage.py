#!/usr/bin/env python3
"""
‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Multi-Exchange Trading Bot

‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
"""

import asyncio
import sys
import os

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from bots.exchange_manager import ExchangeManager
from bots.market_analyzer import MultiExchangeMarketAnalyzer
from bots.multi_exchange_bot import MultiExchangeTradingBot

async def example_1_basic_connection():
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 1: ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
    print("üîó ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 1: ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô")
    print("=" * 50)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á ExchangeManager
    exchange_manager = ExchangeManager("config.json")
    
    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö exchanges
    if exchange_manager.initialize_exchanges():
        print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ exchanges ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
        enabled_exchanges = exchange_manager.get_enabled_exchanges()
        print(f"üìã Exchanges ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {enabled_exchanges}")
        
        # ‡∏î‡∏π‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ exchange
        for exchange_name in enabled_exchanges:
            try:
                balance = exchange_manager.get_balance(exchange_name)
                print(f"üí∞ {exchange_name}: {balance}")
            except Exception as e:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å {exchange_name}: {e}")
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ")
    
    print("\n")

async def example_2_market_analysis():
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 2: ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î"""
    print("üìä ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 2: ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î")
    print("=" * 50)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á MarketAnalyzer
    analyzer = MultiExchangeMarketAnalyzer("config.json")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    if await analyzer.initialize():
        print("‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MarketAnalyzer ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î BTC/USDT
        results = await analyzer.analyze_all_exchanges("BTC/USDT")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        analyzer.print_analysis_summary(results)
        
        # ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡∏≠‡∏á exchange ‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÜ
        for exchange_name, result in results.items():
            if "error" not in result:
                analysis = result["analysis"]
                config = result["config"]
                
                print(f"\nüîç ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå {exchange_name}:")
                print(f"   - Market Condition: {analysis['market_condition']}")
                print(f"   - Volatility: {analysis['price_data']['volatility']:.2%}")
                print(f"   - Recommended Bid Spread: {config['spreads']['bid_spread']:.2%}")
                print(f"   - Recommended Ask Spread: {config['spreads']['ask_spread']:.2%}")
                break
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MarketAnalyzer ‡πÑ‡∏î‡πâ")
    
    print("\n")

async def example_3_single_exchange_data():
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 3: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å exchange ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
    print("üìà ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 3: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å exchange ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß")
    print("=" * 50)
    
    analyzer = MultiExchangeMarketAnalyzer("config.json")
    
    if await analyzer.initialize():
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OHLC ‡∏à‡∏≤‡∏Å Binance
        exchange_name = "binance"
        symbol = "BTC/USDT"
        
        print(f"üìä ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {symbol} ‡∏à‡∏≤‡∏Å {exchange_name}...")
        
        df = await analyzer.fetch_ohlc_data(exchange_name, symbol, "1m", 50)
        
        if df is not None and not df.empty:
            print(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ {len(df)} ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì technical indicators
            df = analyzer.calculate_technical_indicators(df)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            latest = df.iloc[-1]
            print(f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${latest['close']:,.2f}")
            print(f"üìä RSI: {latest.get('rsi', 'N/A'):.1f}")
            print(f"üìà SMA 20: ${latest.get('sma_20', 'N/A'):,.2f}")
            print(f"üìâ EMA 20: ${latest.get('ema_20', 'N/A'):,.2f}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            print(f"\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:")
            print(df[['open', 'high', 'low', 'close', 'volume']].tail())
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
    
    print("\n")

async def example_4_price_comparison():
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 4: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á exchanges"""
    print("‚öñÔ∏è ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 4: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á exchanges")
    print("=" * 50)
    
    exchange_manager = ExchangeManager("config.json")
    
    if exchange_manager.initialize_exchanges():
        symbol = "BTC/USDT"
        enabled_exchanges = exchange_manager.get_enabled_exchanges()
        
        print(f"üí± ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤ {symbol}:")
        
        prices = {}
        
        for exchange_name in enabled_exchanges:
            try:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ exchange ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö symbol ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                trading_pairs = exchange_manager.get_trading_pairs(exchange_name)
                if symbol not in trading_pairs:
                    continue
                
                ticker = await exchange_manager.fetch_ticker(exchange_name, symbol)
                if ticker:
                    prices[exchange_name] = ticker['last']
                    print(f"   {exchange_name.upper()}: ${ticker['last']:,.2f}")
            except Exception as e:
                print(f"   {exchange_name.upper()}: ‚ùå {e}")
        
        # ‡∏´‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
        if prices:
            max_price = max(prices.values())
            min_price = min(prices.values())
            spread = (max_price - min_price) / min_price * 100
            
            print(f"\nüìä ‡∏™‡∏£‡∏∏‡∏õ:")
            print(f"   ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: ${max_price:,.2f}")
            print(f"   ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î: ${min_price:,.2f}")
            print(f"   ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤: {spread:.2f}%")
    
    print("\n")

async def example_5_custom_analysis():
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 5: ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á"""
    print("üî¨ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 5: ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á")
    print("=" * 50)
    
    analyzer = MultiExchangeMarketAnalyzer("config.json")
    
    if await analyzer.initialize():
        exchange_name = "binance"
        symbol = "BTC/USDT"
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        df = await analyzer.fetch_ohlc_data(exchange_name, symbol, "1m", 100)
        
        if df is not None and not df.empty:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì indicators
            df = analyzer.calculate_technical_indicators(df)
            
            # ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
            latest = df.iloc[-1]
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì Golden Cross
            sma_20 = latest.get('sma_20', 0)
            sma_50 = latest.get('sma_50', 0)
            
            if sma_20 > sma_50:
                print("üü¢ Golden Cross: SMA 20 ‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ SMA 50 (‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ö‡∏ß‡∏Å)")
            else:
                print("üî¥ Death Cross: SMA 20 ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ï‡πâ SMA 50 (‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏•‡∏ö)")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö RSI
            rsi = latest.get('rsi', 50)
            if rsi > 70:
                print(f"‚ö†Ô∏è RSI Overbought: {rsi:.1f} (‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢)")
            elif rsi < 30:
                print(f"üí° RSI Oversold: {rsi:.1f} (‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠)")
            else:
                print(f"üìä RSI Neutral: {rsi:.1f}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Bollinger Bands
            bb_upper = latest.get('bb_upper', 0)
            bb_lower = latest.get('bb_lower', 0)
            current_price = latest['close']
            
            if current_price > bb_upper:
                print(f"üî• ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ Bollinger Band ‡∏ö‡∏ô (${bb_upper:,.2f})")
            elif current_price < bb_lower:
                print(f"‚ùÑÔ∏è ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ï‡πâ Bollinger Band ‡∏•‡πà‡∏≤‡∏á (${bb_lower:,.2f})")
            else:
                print(f"üìä ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á Bollinger Bands")
    
    print("\n")

async def example_6_bot_simulation():
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 6: ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó (‡πÑ‡∏°‡πà‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á)"""
    print("ü§ñ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 6: ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó")
    print("=" * 50)
    
    bot = MultiExchangeTradingBot("config.json")
    
    if await bot.initialize():
        print("‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏≠‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ
        print(f"üìã Trading Config ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î:")
        for exchange_name, symbols in bot.trading_config.items():
            print(f"   {exchange_name}: {list(symbols.keys())}")
        
        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• 1 ‡∏£‡∏≠‡∏ö
        print(f"\nüîÑ ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...")
        
        for exchange_name in bot.exchange_manager.get_enabled_exchanges():
            trading_pairs = bot.exchange_manager.get_trading_pairs(exchange_name)
            
            for symbol in trading_pairs[:1]:  # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏Ñ‡πà 1 symbol
                print(f"   üìä ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• {exchange_name}:{symbol}")
                
                # ‡∏î‡∏∂‡∏á config
                config = bot.trading_config.get(exchange_name, {}).get(symbol)
                if config and "error" not in config:
                    spreads = config.get('spreads', {})
                    print(f"      - Bid Spread: {spreads.get('bid_spread', 0):.2%}")
                    print(f"      - Ask Spread: {spreads.get('ask_spread', 0):.2%}")
                    print(f"      - Market Condition: {config.get('market_condition', 'unknown')}")
                else:
                    print(f"      ‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ config ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
                
                break  # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏Ñ‡πà 1 symbol ‡∏ï‡πà‡∏≠ exchange
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ")
    
    print("\n")

async def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    print("üöÄ Multi-Exchange Trading Bot - ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    print("=" * 60)
    print()
    
    try:
        # ‡∏£‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏≠‡∏±‡∏ô
        await example_1_basic_connection()
        await example_2_market_analysis()
        await example_3_single_exchange_data()
        await example_4_price_comparison()
        await example_5_custom_analysis()
        await example_6_bot_simulation()
        
        print("‚úÖ ‡∏£‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    except Exception as e:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

if __name__ == "__main__":
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå config ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if not os.path.exists("config.json"):
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå config.json")
        print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: python cli.py setup")
        exit(1)
    
    # ‡∏£‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    asyncio.run(main()) 