#!/usr/bin/env python3
"""
‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Crypto Pairs Scanner
‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô MACD Scanner ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
"""

import asyncio
import sys
import os
from datetime import datetime

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from bots.crypto_scanner import CryptoPairsScanner, run_single_scan, run_continuous_scan

async def example_1_basic_scan():
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 1: ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
    print("üîç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 1: ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô")
    print("=" * 50)
    
    scanner = CryptoPairsScanner()
    
    if not await scanner.initialize():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö exchange ‡πÑ‡∏î‡πâ")
        return
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
    scanner.update_config(
        timeframes=['1h', '4h'],
        exchanges=['binance'],
        min_signal_strength=50
    )
    
    # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
    results = await scanner.scan_all_pairs()
    scanner.print_scan_results()
    
    print("\n")

async def example_2_custom_pairs():
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 2: ‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏π‡πà‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á"""
    print("üéØ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 2: ‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏π‡πà‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á")
    print("=" * 50)
    
    scanner = CryptoPairsScanner()
    
    if not await scanner.initialize():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö exchange ‡πÑ‡∏î‡πâ")
        return
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏π‡πà‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à
    custom_pairs = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'ADA/USDT', 'SOL/USDT']
    
    scanner.update_config(
        trading_pairs=custom_pairs,
        timeframes=['4h', '1d'],
        min_signal_strength=70,
        min_volume_24h=500000
    )
    
    results = await scanner.scan_all_pairs()
    
    # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì Long
    long_signals = scanner.get_top_signals('long', 10)
    if long_signals:
        print("üü¢ ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì LONG ‡∏ó‡∏µ‡πà‡∏û‡∏ö:")
        for i, signal in enumerate(long_signals, 1):
            print(f"{i}. {signal.symbol} ({signal.exchange}) - {signal.timeframe}")
            print(f"   ‡∏£‡∏≤‡∏Ñ‡∏≤: ${signal.price:,.4f} | ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á: {signal.strength:.1f}%")
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì Long")
    
    print("\n")

async def example_3_single_pair_check():
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 3: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏ó‡∏£‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
    print("üìä ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 3: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏ó‡∏£‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß")
    print("=" * 50)
    
    scanner = CryptoPairsScanner()
    
    if not await scanner.initialize():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö exchange ‡πÑ‡∏î‡πâ")
        return
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö BTC/USDT ‡πÉ‡∏ô timeframes ‡∏ï‡πà‡∏≤‡∏á‡πÜ
    symbol = "BTC/USDT"
    exchange = "binance"
    timeframes = ['1h', '4h', '1d']
    
    print(f"üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö {symbol} ‡πÉ‡∏ô {exchange.upper()}")
    print("-" * 40)
    
    for tf in timeframes:
        signals = await scanner.scan_single_pair(exchange, symbol, tf)
        
        if signals:
            signal = signals[0]
            signal_emoji = "üü¢" if signal.signal_type == "long" else "üî¥"
            print(f"{tf}: {signal_emoji} {signal.signal_type.upper()} (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á: {signal.strength:.1f}%)")
        else:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MACD ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            df = await scanner.fetch_ohlcv_data(exchange, symbol, tf, 50)
            if df is not None and not df.empty:
                df = scanner.calculate_macd(df)
                latest = df.iloc[-1]
                
                macd_status = "üü¢ ‡∏ö‡∏ß‡∏Å" if latest['macd'] > 0 else "üî¥ ‡∏•‡∏ö"
                print(f"{tf}: ‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì | MACD: {macd_status} ({latest['macd']:.6f})")
    
    print("\n")

async def example_4_timeframe_comparison():
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 4: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö timeframes"""
    print("‚è∞ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 4: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö timeframes")
    print("=" * 50)
    
    scanner = CryptoPairsScanner()
    
    if not await scanner.initialize():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö exchange ‡πÑ‡∏î‡πâ")
        return
    
    # ‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏ô timeframes ‡∏ï‡πà‡∏≤‡∏á‡πÜ
    timeframes = ['15m', '1h', '4h', '1d']
    
    for tf in timeframes:
        print(f"üìä ‡∏™‡πÅ‡∏Å‡∏ô Timeframe: {tf}")
        print("-" * 30)
        
        scanner.update_config(timeframes=[tf])
        results = await scanner.scan_all_pairs([tf])
        
        if results:
            total_signals = sum(len(signals) for signals in results.values())
            long_signals = len([s for signals in results.values() for s in signals if s.signal_type == 'long'])
            short_signals = len([s for signals in results.values() for s in signals if s.signal_type == 'short'])
            
            print(f"   ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_signals}")
            print(f"   Long: {long_signals} | Short: {short_signals}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡πÅ‡∏£‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            top_signal = scanner.get_top_signals(limit=1)
            if top_signal:
                signal = top_signal[0]
                signal_emoji = "üü¢" if signal.signal_type == "long" else "üî¥"
                print(f"   {signal_emoji} ‡πÅ‡∏£‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: {signal.symbol} ({signal.strength:.1f}%)")
        else:
            print("   ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì")
        
        print()

async def example_5_export_signals():
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 5: ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì"""
    print("üìÅ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 5: ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì")
    print("=" * 50)
    
    scanner = CryptoPairsScanner()
    
    if not await scanner.initialize():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö exchange ‡πÑ‡∏î‡πâ")
        return
    
    # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
    results = await scanner.scan_all_pairs()
    
    if results:
        # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON
        filename = scanner.export_signals_to_json()
        print(f"‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå: {filename}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        total_signals = sum(len(signals) for signals in results.values())
        print(f"üìä ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_signals}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î 3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö
        top_signals = scanner.get_top_signals(limit=3)
        if top_signals:
            print("\nüèÜ TOP 3 ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:")
            for i, signal in enumerate(top_signals, 1):
                signal_emoji = "üü¢" if signal.signal_type == "long" else "üî¥"
                print(f"{i}. {signal_emoji} {signal.symbol} ({signal.exchange}) - {signal.timeframe}")
                print(f"   ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {signal.signal_type.upper()} | ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á: {signal.strength:.1f}%")
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì")
    
    print("\n")

async def example_6_macd_settings():
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 6: ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MACD"""
    print("‚öôÔ∏è ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 6: ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MACD")
    print("=" * 50)
    
    scanner = CryptoPairsScanner()
    
    if not await scanner.initialize():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö exchange ‡πÑ‡∏î‡πâ")
        return
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MACD ‡∏ï‡πà‡∏≤‡∏á‡πÜ
    macd_settings = [
        {"fast": 12, "slow": 26, "signal": 9, "name": "Standard"},
        {"fast": 8, "slow": 21, "signal": 5, "name": "Fast"},
        {"fast": 19, "slow": 39, "signal": 9, "name": "Slow"}
    ]
    
    symbol = "BTC/USDT"
    exchange = "binance"
    timeframe = "4h"
    
    print(f"üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MACD ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {symbol}")
    print("-" * 40)
    
    for setting in macd_settings:
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MACD
        scanner.update_config(
            macd_fast=setting["fast"],
            macd_slow=setting["slow"],
            macd_signal_period=setting["signal"]
        )
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì MACD
        df = await scanner.fetch_ohlcv_data(exchange, symbol, timeframe, 100)
        if df is not None and not df.empty:
            df = scanner.calculate_macd(df)
            latest = df.iloc[-1]
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
            signals = scanner.detect_macd_signals(df, symbol, exchange, timeframe)
            
            print(f"{setting['name']} ({setting['fast']},{setting['slow']},{setting['signal']}):")
            print(f"   MACD: {latest['macd']:.6f}")
            print(f"   Signal: {latest['macd_signal']:.6f}")
            
            if signals:
                signal = signals[0]
                signal_emoji = "üü¢" if signal.signal_type == "long" else "üî¥"
                print(f"   {signal_emoji} ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì: {signal.signal_type.upper()} (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á: {signal.strength:.1f}%)")
            else:
                print("   ‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì")
        
        print()

async def example_7_real_time_monitoring():
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 7: ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏ö‡∏ö real-time (‡∏à‡∏≥‡∏•‡∏≠‡∏á)"""
    print("üì° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 7: ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏ö‡∏ö real-time")
    print("=" * 50)
    print("‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° 3 ‡∏£‡∏≠‡∏ö (‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á)")
    print()
    
    scanner = CryptoPairsScanner()
    
    if not await scanner.initialize():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö exchange ‡πÑ‡∏î‡πâ")
        return
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
    scanner.update_config(
        timeframes=['1h'],
        trading_pairs=['BTC/USDT', 'ETH/USDT', 'BNB/USDT'],
        min_signal_strength=60
    )
    
    for round_num in range(1, 4):
        print(f"üîÑ ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {round_num} - {datetime.now().strftime('%H:%M:%S')}")
        print("-" * 30)
        
        results = await scanner.scan_all_pairs()
        
        if results:
            total_signals = sum(len(signals) for signals in results.values())
            print(f"üìä ‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì: {total_signals}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡∏°‡πà
            top_signals = scanner.get_top_signals(limit=2)
            for signal in top_signals:
                signal_emoji = "üü¢" if signal.signal_type == "long" else "üî¥"
                print(f"   {signal_emoji} {signal.symbol}: {signal.signal_type.upper()} ({signal.strength:.1f}%)")
        else:
            print("üìä ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡∏°‡πà")
        
        print()
        
        # ‡∏£‡∏≠ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô 15 ‡∏ô‡∏≤‡∏ó‡∏µ)
        if round_num < 3:
            print("‚è≥ ‡∏£‡∏≠ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
            await asyncio.sleep(10)
            print()

async def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    print("üîç Crypto Pairs Scanner - ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    print("=" * 60)
    print()
    
    try:
        # ‡∏£‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏≠‡∏±‡∏ô
        await example_1_basic_scan()
        await example_2_custom_pairs()
        await example_3_single_pair_check()
        await example_4_timeframe_comparison()
        await example_5_export_signals()
        await example_6_macd_settings()
        await example_7_real_time_monitoring()
        
        print("‚úÖ ‡∏£‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    except Exception as e:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

if __name__ == "__main__":
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå config ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if not os.path.exists("config.json"):
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå config.json")
        print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: python cli.py setup")
        exit(1)
    
    # ‡∏£‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    asyncio.run(main()) 